/* 
 * Forge SDK
 *
 * The Forge Platform contains an expanding collection of web service components that can be used with Autodesk cloud-based products or your own technologies. Take advantage of Autodeskâ€™s expertise in design and engineering.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: forge.help@autodesk.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Autodesk.Forge.Model
{
    /// <summary>
    /// Requested output files for the source file URN
    /// </summary>
    [DataContract]
    public partial class ManifestDerivative :  IEquatable<ManifestDerivative>
    {
        /// <summary>
        /// Gets or Sets OutputType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OutputTypeEnum
        {
            
            /// <summary>
            /// Enum Stl for "stl"
            /// </summary>
            [EnumMember(Value = "stl")]
            Stl,
            
            /// <summary>
            /// Enum Step for "step"
            /// </summary>
            [EnumMember(Value = "step")]
            Step,
            
            /// <summary>
            /// Enum Iges for "iges"
            /// </summary>
            [EnumMember(Value = "iges")]
            Iges,
            
            /// <summary>
            /// Enum Obj for "obj"
            /// </summary>
            [EnumMember(Value = "obj")]
            Obj,
            
            /// <summary>
            /// Enum Svf for "svf"
            /// </summary>
            [EnumMember(Value = "svf")]
            Svf,
            
            /// <summary>
            /// Enum Thumbnail for "thumbnail"
            /// </summary>
            [EnumMember(Value = "thumbnail")]
            Thumbnail
        }

        /// <summary>
        /// Status of the requested entity; possible values are: `pending`, `success`, `inprogress`, `failed`, `timeout` and `partialsuccess` 
        /// </summary>
        /// <value>Status of the requested entity; possible values are: `pending`, `success`, `inprogress`, `failed`, `timeout` and `partialsuccess` </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Pending for "pending"
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending,
            
            /// <summary>
            /// Enum Inprogress for "inprogress"
            /// </summary>
            [EnumMember(Value = "inprogress")]
            Inprogress,
            
            /// <summary>
            /// Enum Success for "success"
            /// </summary>
            [EnumMember(Value = "success")]
            Success,
            
            /// <summary>
            /// Enum Failed for "failed"
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed,
            
            /// <summary>
            /// Enum Timeout for "timeout"
            /// </summary>
            [EnumMember(Value = "timeout")]
            Timeout,
            
            /// <summary>
            /// Enum Partialsuccess for "partialsuccess"
            /// </summary>
            [EnumMember(Value = "partialsuccess")]
            Partialsuccess
        }

        /// <summary>
        /// Gets or Sets OutputType
        /// </summary>
        [DataMember(Name="outputType", EmitDefaultValue=false)]
        public OutputTypeEnum? OutputType { get; set; }
        /// <summary>
        /// Status of the requested entity; possible values are: `pending`, `success`, `inprogress`, `failed`, `timeout` and `partialsuccess` 
        /// </summary>
        /// <value>Status of the requested entity; possible values are: `pending`, `success`, `inprogress`, `failed`, `timeout` and `partialsuccess` </value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ManifestDerivative" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ManifestDerivative() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ManifestDerivative" /> class.
        /// </summary>
        /// <param name="Name">Output file type (required).</param>
        /// <param name="HasThumbnail">Indicates if a thumbnail has been generated (required).</param>
        /// <param name="OutputType">OutputType.</param>
        /// <param name="Progress">Translation progress for requested entity (required).</param>
        /// <param name="Status">Status of the requested entity; possible values are: &#x60;pending&#x60;, &#x60;success&#x60;, &#x60;inprogress&#x60;, &#x60;failed&#x60;, &#x60;timeout&#x60; and &#x60;partialsuccess&#x60;  (required).</param>
        /// <param name="Children">Children (required).</param>
        public ManifestDerivative(string Name = null, bool? HasThumbnail = null, OutputTypeEnum? OutputType = null, string Progress = null, StatusEnum? Status = null, List<ManifestChildren> Children = null)
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for ManifestDerivative and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "HasThumbnail" is required (not null)
            if (HasThumbnail == null)
            {
                throw new InvalidDataException("HasThumbnail is a required property for ManifestDerivative and cannot be null");
            }
            else
            {
                this.HasThumbnail = HasThumbnail;
            }
            // to ensure "Progress" is required (not null)
            if (Progress == null)
            {
                throw new InvalidDataException("Progress is a required property for ManifestDerivative and cannot be null");
            }
            else
            {
                this.Progress = Progress;
            }
            // to ensure "Status" is required (not null)
            if (Status == null)
            {
                throw new InvalidDataException("Status is a required property for ManifestDerivative and cannot be null");
            }
            else
            {
                this.Status = Status;
            }
            // to ensure "Children" is required (not null)
            if (Children == null)
            {
                throw new InvalidDataException("Children is a required property for ManifestDerivative and cannot be null");
            }
            else
            {
                this.Children = Children;
            }
            this.OutputType = OutputType;
        }
        
        /// <summary>
        /// Output file type
        /// </summary>
        /// <value>Output file type</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Indicates if a thumbnail has been generated
        /// </summary>
        /// <value>Indicates if a thumbnail has been generated</value>
        [DataMember(Name="hasThumbnail", EmitDefaultValue=false)]
        public bool? HasThumbnail { get; set; }
        /// <summary>
        /// Translation progress for requested entity
        /// </summary>
        /// <value>Translation progress for requested entity</value>
        [DataMember(Name="progress", EmitDefaultValue=false)]
        public string Progress { get; set; }
        /// <summary>
        /// Gets or Sets Children
        /// </summary>
        [DataMember(Name="children", EmitDefaultValue=false)]
        public List<ManifestChildren> Children { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ManifestDerivative {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  HasThumbnail: ").Append(HasThumbnail).Append("\n");
            sb.Append("  OutputType: ").Append(OutputType).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ManifestDerivative);
        }

        /// <summary>
        /// Returns true if ManifestDerivative instances are equal
        /// </summary>
        /// <param name="other">Instance of ManifestDerivative to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ManifestDerivative other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.HasThumbnail == other.HasThumbnail ||
                    this.HasThumbnail != null &&
                    this.HasThumbnail.Equals(other.HasThumbnail)
                ) && 
                (
                    this.OutputType == other.OutputType ||
                    this.OutputType != null &&
                    this.OutputType.Equals(other.OutputType)
                ) && 
                (
                    this.Progress == other.Progress ||
                    this.Progress != null &&
                    this.Progress.Equals(other.Progress)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Children == other.Children ||
                    this.Children != null &&
                    this.Children.SequenceEqual(other.Children)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.HasThumbnail != null)
                    hash = hash * 59 + this.HasThumbnail.GetHashCode();
                if (this.OutputType != null)
                    hash = hash * 59 + this.OutputType.GetHashCode();
                if (this.Progress != null)
                    hash = hash * 59 + this.Progress.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Children != null)
                    hash = hash * 59 + this.Children.GetHashCode();
                return hash;
            }
        }
    }

}

