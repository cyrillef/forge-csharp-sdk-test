/* 
 * Forge SDK
 *
 * The Forge Platform contains an expanding collection of web service components that can be used with Autodesk cloud-based products or your own technologies. Take advantage of Autodeskâ€™s expertise in design and engineering.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: forge.help@autodesk.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Autodesk.Forge.Model
{
    /// <summary>
    /// BaseAttributesCreatedUpdatedAttributes
    /// </summary>
    [DataContract]
    public partial class BaseAttributesCreatedUpdatedAttributes :  IEquatable<BaseAttributesCreatedUpdatedAttributes>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BaseAttributesCreatedUpdatedAttributes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BaseAttributesCreatedUpdatedAttributes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BaseAttributesCreatedUpdatedAttributes" /> class.
        /// </summary>
        /// <param name="CreateTime">CreateTime (required).</param>
        /// <param name="CreateUserId">CreateUserId (required).</param>
        /// <param name="LastModifiedTime">LastModifiedTime (required).</param>
        /// <param name="LastModifiedUserId">LastModifiedUserId (required).</param>
        public BaseAttributesCreatedUpdatedAttributes(DateTime? CreateTime = null, string CreateUserId = null, DateTime? LastModifiedTime = null, string LastModifiedUserId = null)
        {
            // to ensure "CreateTime" is required (not null)
            if (CreateTime == null)
            {
                throw new InvalidDataException("CreateTime is a required property for BaseAttributesCreatedUpdatedAttributes and cannot be null");
            }
            else
            {
                this.CreateTime = CreateTime;
            }
            // to ensure "CreateUserId" is required (not null)
            if (CreateUserId == null)
            {
                throw new InvalidDataException("CreateUserId is a required property for BaseAttributesCreatedUpdatedAttributes and cannot be null");
            }
            else
            {
                this.CreateUserId = CreateUserId;
            }
            // to ensure "LastModifiedTime" is required (not null)
            if (LastModifiedTime == null)
            {
                throw new InvalidDataException("LastModifiedTime is a required property for BaseAttributesCreatedUpdatedAttributes and cannot be null");
            }
            else
            {
                this.LastModifiedTime = LastModifiedTime;
            }
            // to ensure "LastModifiedUserId" is required (not null)
            if (LastModifiedUserId == null)
            {
                throw new InvalidDataException("LastModifiedUserId is a required property for BaseAttributesCreatedUpdatedAttributes and cannot be null");
            }
            else
            {
                this.LastModifiedUserId = LastModifiedUserId;
            }
        }
        
        /// <summary>
        /// Gets or Sets CreateTime
        /// </summary>
        [DataMember(Name="createTime", EmitDefaultValue=false)]
        public DateTime? CreateTime { get; set; }
        /// <summary>
        /// Gets or Sets CreateUserId
        /// </summary>
        [DataMember(Name="createUserId", EmitDefaultValue=false)]
        public string CreateUserId { get; set; }
        /// <summary>
        /// Gets or Sets LastModifiedTime
        /// </summary>
        [DataMember(Name="lastModifiedTime", EmitDefaultValue=false)]
        public DateTime? LastModifiedTime { get; set; }
        /// <summary>
        /// Gets or Sets LastModifiedUserId
        /// </summary>
        [DataMember(Name="lastModifiedUserId", EmitDefaultValue=false)]
        public string LastModifiedUserId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BaseAttributesCreatedUpdatedAttributes {\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  CreateUserId: ").Append(CreateUserId).Append("\n");
            sb.Append("  LastModifiedTime: ").Append(LastModifiedTime).Append("\n");
            sb.Append("  LastModifiedUserId: ").Append(LastModifiedUserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BaseAttributesCreatedUpdatedAttributes);
        }

        /// <summary>
        /// Returns true if BaseAttributesCreatedUpdatedAttributes instances are equal
        /// </summary>
        /// <param name="other">Instance of BaseAttributesCreatedUpdatedAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BaseAttributesCreatedUpdatedAttributes other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CreateTime == other.CreateTime ||
                    this.CreateTime != null &&
                    this.CreateTime.Equals(other.CreateTime)
                ) && 
                (
                    this.CreateUserId == other.CreateUserId ||
                    this.CreateUserId != null &&
                    this.CreateUserId.Equals(other.CreateUserId)
                ) && 
                (
                    this.LastModifiedTime == other.LastModifiedTime ||
                    this.LastModifiedTime != null &&
                    this.LastModifiedTime.Equals(other.LastModifiedTime)
                ) && 
                (
                    this.LastModifiedUserId == other.LastModifiedUserId ||
                    this.LastModifiedUserId != null &&
                    this.LastModifiedUserId.Equals(other.LastModifiedUserId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CreateTime != null)
                    hash = hash * 59 + this.CreateTime.GetHashCode();
                if (this.CreateUserId != null)
                    hash = hash * 59 + this.CreateUserId.GetHashCode();
                if (this.LastModifiedTime != null)
                    hash = hash * 59 + this.LastModifiedTime.GetHashCode();
                if (this.LastModifiedUserId != null)
                    hash = hash * 59 + this.LastModifiedUserId.GetHashCode();
                return hash;
            }
        }
    }

}

