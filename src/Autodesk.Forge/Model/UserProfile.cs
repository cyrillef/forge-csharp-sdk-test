/* 
 * Forge SDK
 *
 * The Forge Platform contains an expanding collection of web service components that can be used with Autodesk cloud-based products or your own technologies. Take advantage of Autodesk’s expertise in design and engineering.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: forge.help@autodesk.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Autodesk.Forge
{
    /// <summary>
    /// UserProfile
    /// </summary>
    [DataContract]
    public partial class UserProfile :  IEquatable<UserProfile>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserProfile" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserProfile() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserProfile" /> class.
        /// </summary>
        /// <param name="UserId">The backend user ID of the profile (required).</param>
        /// <param name="UserName">The username chosen by the user (required).</param>
        /// <param name="EmailId">The user’s email address (required).</param>
        /// <param name="FirstName">The user’s first name (required).</param>
        /// <param name="LastName">The user’s last name (required).</param>
        /// <param name="EmailVerified">true if the user’s email address has been verified false if the user’s email address has not been verified  (required).</param>
        /// <param name="_2FaEnabled">true if the user has enabled two-factor authentication false if the user has not enabled two-factor authentication  (required).</param>
        /// <param name="ProfileImages">A flat JSON object of attribute-value pairs in which the attributes specify available profile image sizes in the format sizeX&lt;pixels&gt; (where &lt;pixels&gt; is an integer that represents both height and width in pixels of square profile images) and the values are URLs for downloading the images via HTTP (required).</param>
        public UserProfile(string UserId = null, string UserName = null, string EmailId = null, string FirstName = null, string LastName = null, bool? EmailVerified = null, bool? _2FaEnabled = null, Object ProfileImages = null)
        {
            // to ensure "UserId" is required (not null)
            if (UserId == null)
            {
                throw new InvalidDataException("UserId is a required property for UserProfile and cannot be null");
            }
            else
            {
                this.UserId = UserId;
            }
            // to ensure "UserName" is required (not null)
            if (UserName == null)
            {
                throw new InvalidDataException("UserName is a required property for UserProfile and cannot be null");
            }
            else
            {
                this.UserName = UserName;
            }
            // to ensure "EmailId" is required (not null)
            if (EmailId == null)
            {
                throw new InvalidDataException("EmailId is a required property for UserProfile and cannot be null");
            }
            else
            {
                this.EmailId = EmailId;
            }
            // to ensure "FirstName" is required (not null)
            if (FirstName == null)
            {
                throw new InvalidDataException("FirstName is a required property for UserProfile and cannot be null");
            }
            else
            {
                this.FirstName = FirstName;
            }
            // to ensure "LastName" is required (not null)
            if (LastName == null)
            {
                throw new InvalidDataException("LastName is a required property for UserProfile and cannot be null");
            }
            else
            {
                this.LastName = LastName;
            }
            // to ensure "EmailVerified" is required (not null)
            if (EmailVerified == null)
            {
                throw new InvalidDataException("EmailVerified is a required property for UserProfile and cannot be null");
            }
            else
            {
                this.EmailVerified = EmailVerified;
            }
            // to ensure "_2FaEnabled" is required (not null)
            if (_2FaEnabled == null)
            {
                throw new InvalidDataException("_2FaEnabled is a required property for UserProfile and cannot be null");
            }
            else
            {
                this._2FaEnabled = _2FaEnabled;
            }
            // to ensure "ProfileImages" is required (not null)
            if (ProfileImages == null)
            {
                throw new InvalidDataException("ProfileImages is a required property for UserProfile and cannot be null");
            }
            else
            {
                this.ProfileImages = ProfileImages;
            }
        }

        /// <summary>
        /// The backend user ID of the profile
        /// </summary>
        /// <value>The backend user ID of the profile</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public string UserId { get; set; }
        /// <summary>
        /// The username chosen by the user
        /// </summary>
        /// <value>The username chosen by the user</value>
        [DataMember(Name="userName", EmitDefaultValue=false)]
        public string UserName { get; set; }
        /// <summary>
        /// The user’s email address
        /// </summary>
        /// <value>The user’s email address</value>
        [DataMember(Name="emailId", EmitDefaultValue=false)]
        public string EmailId { get; set; }
        /// <summary>
        /// The user’s first name
        /// </summary>
        /// <value>The user’s first name</value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }
        /// <summary>
        /// The user’s last name
        /// </summary>
        /// <value>The user’s last name</value>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }
        /// <summary>
        /// true if the user’s email address has been verified false if the user’s email address has not been verified
        /// </summary>
        /// <value>true if the user’s email address has been verified false if the user’s email address has not been verified </value>
        [DataMember(Name="emailVerified", EmitDefaultValue=false)]
        public bool? EmailVerified { get; set; }
        /// <summary>
        /// true if the user has enabled two-factor authentication false if the user has not enabled two-factor authentication
        /// </summary>
        /// <value>true if the user has enabled two-factor authentication false if the user has not enabled two-factor authentication </value>
        [DataMember(Name="2FaEnabled", EmitDefaultValue=false)]
        public bool? _2FaEnabled { get; set; }
        /// <summary>
        /// A flat JSON object of attribute-value pairs in which the attributes specify available profile image sizes in the format sizeX&lt;pixels&gt; (where &lt;pixels&gt; is an integer that represents both height and width in pixels of square profile images) and the values are URLs for downloading the images via HTTP
        /// </summary>
        /// <value>A flat JSON object of attribute-value pairs in which the attributes specify available profile image sizes in the format sizeX&lt;pixels&gt; (where &lt;pixels&gt; is an integer that represents both height and width in pixels of square profile images) and the values are URLs for downloading the images via HTTP</value>
        [DataMember(Name="profileImages", EmitDefaultValue=false)]
        public Object ProfileImages { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserProfile {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  EmailId: ").Append(EmailId).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  EmailVerified: ").Append(EmailVerified).Append("\n");
            sb.Append("  _2FaEnabled: ").Append(_2FaEnabled).Append("\n");
            sb.Append("  ProfileImages: ").Append(ProfileImages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UserProfile);
        }

        /// <summary>
        /// Returns true if UserProfile instances are equal
        /// </summary>
        /// <param name="other">Instance of UserProfile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserProfile other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.UserId == other.UserId ||
                    this.UserId != null &&
                    this.UserId.Equals(other.UserId)
                ) &&
                (
                    this.UserName == other.UserName ||
                    this.UserName != null &&
                    this.UserName.Equals(other.UserName)
                ) &&
                (
                    this.EmailId == other.EmailId ||
                    this.EmailId != null &&
                    this.EmailId.Equals(other.EmailId)
                ) &&
                (
                    this.FirstName == other.FirstName ||
                    this.FirstName != null &&
                    this.FirstName.Equals(other.FirstName)
                ) &&
                (
                    this.LastName == other.LastName ||
                    this.LastName != null &&
                    this.LastName.Equals(other.LastName)
                ) &&
                (
                    this.EmailVerified == other.EmailVerified ||
                    this.EmailVerified != null &&
                    this.EmailVerified.Equals(other.EmailVerified)
                ) &&
                (
                    this._2FaEnabled == other._2FaEnabled ||
                    this._2FaEnabled != null &&
                    this._2FaEnabled.Equals(other._2FaEnabled)
                ) &&
                (
                    this.ProfileImages == other.ProfileImages ||
                    this.ProfileImages != null &&
                    this.ProfileImages.Equals(other.ProfileImages)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.UserId != null)
                    hash = hash * 59 + this.UserId.GetHashCode();
                if (this.UserName != null)
                    hash = hash * 59 + this.UserName.GetHashCode();
                if (this.EmailId != null)
                    hash = hash * 59 + this.EmailId.GetHashCode();
                if (this.FirstName != null)
                    hash = hash * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hash = hash * 59 + this.LastName.GetHashCode();
                if (this.EmailVerified != null)
                    hash = hash * 59 + this.EmailVerified.GetHashCode();
                if (this._2FaEnabled != null)
                    hash = hash * 59 + this._2FaEnabled.GetHashCode();
                if (this.ProfileImages != null)
                    hash = hash * 59 + this.ProfileImages.GetHashCode();
                return hash;
            }
        }
    }

}
