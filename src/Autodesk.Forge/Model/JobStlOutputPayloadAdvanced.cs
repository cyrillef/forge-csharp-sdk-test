/* 
 * Forge SDK
 *
 * The Forge Platform contains an expanding collection of web service components that can be used with Autodesk cloud-based products or your own technologies. Take advantage of Autodeskâ€™s expertise in design and engineering.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: forge.help@autodesk.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Autodesk.Forge.Model
{
    /// <summary>
    /// Advanced options for &#x60;stl&#x60; type.
    /// </summary>
    [DataContract]
    public partial class JobStlOutputPayloadAdvanced :  IEquatable<JobStlOutputPayloadAdvanced>
    {
        /// <summary>
        /// Default format is `binary`. Possible values are `binary` or `ascii`.
        /// </summary>
        /// <value>Default format is `binary`. Possible values are `binary` or `ascii`.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FormatEnum
        {
            
            /// <summary>
            /// Enum Binary for "binary"
            /// </summary>
            [EnumMember(Value = "binary")]
            Binary,
            
            /// <summary>
            /// Enum Ascii for "ascii"
            /// </summary>
            [EnumMember(Value = "ascii")]
            Ascii
        }

        /// <summary>
        /// `single` (default): creates one STL file for all the input files (assembly file)  `multiple`: creates a separate STL file for each object 
        /// </summary>
        /// <value>`single` (default): creates one STL file for all the input files (assembly file)  `multiple`: creates a separate STL file for each object </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ExportFileStructureEnum
        {
            
            /// <summary>
            /// Enum Single for "single"
            /// </summary>
            [EnumMember(Value = "single")]
            Single,
            
            /// <summary>
            /// Enum Multiple for "multiple"
            /// </summary>
            [EnumMember(Value = "multiple")]
            Multiple
        }

        /// <summary>
        /// Default format is `binary`. Possible values are `binary` or `ascii`.
        /// </summary>
        /// <value>Default format is `binary`. Possible values are `binary` or `ascii`.</value>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public FormatEnum? Format { get; set; }
        /// <summary>
        /// `single` (default): creates one STL file for all the input files (assembly file)  `multiple`: creates a separate STL file for each object 
        /// </summary>
        /// <value>`single` (default): creates one STL file for all the input files (assembly file)  `multiple`: creates a separate STL file for each object </value>
        [DataMember(Name="exportFileStructure", EmitDefaultValue=false)]
        public ExportFileStructureEnum? ExportFileStructure { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="JobStlOutputPayloadAdvanced" /> class.
        /// </summary>
        /// <param name="Format">Default format is &#x60;binary&#x60;. Possible values are &#x60;binary&#x60; or &#x60;ascii&#x60;. (default to &quot;binary&quot;).</param>
        /// <param name="ExportColor">Color is exported by default. If set to &#x60;true&#x60;, color is exported. If set to &#x60;false&#x60;, color is not exported. (default to true).</param>
        /// <param name="ExportFileStructure">&#x60;single&#x60; (default): creates one STL file for all the input files (assembly file)  &#x60;multiple&#x60;: creates a separate STL file for each object  (default to &quot;single&quot;).</param>
        public JobStlOutputPayloadAdvanced(FormatEnum? Format = null, bool? ExportColor = null, ExportFileStructureEnum? ExportFileStructure = null)
        {
            // use default value if no "Format" provided
            if (Format == null)
            {
                this.Format = (FormatEnum)Enum.Parse(typeof(FormatEnum), "binary", true);
            }
            else
            {
                this.Format = Format;
            }
            // use default value if no "ExportColor" provided
            if (ExportColor == null)
            {
                this.ExportColor = true;
            }
            else
            {
                this.ExportColor = ExportColor;
            }
            // use default value if no "ExportFileStructure" provided
            if (ExportFileStructure == null)
            {
                this.ExportFileStructure = (ExportFileStructureEnum)Enum.Parse(typeof(ExportFileStructureEnum), "single", true);
            }
            else
            {
                this.ExportFileStructure = ExportFileStructure;
            }
        }
        
        /// <summary>
        /// Color is exported by default. If set to &#x60;true&#x60;, color is exported. If set to &#x60;false&#x60;, color is not exported.
        /// </summary>
        /// <value>Color is exported by default. If set to &#x60;true&#x60;, color is exported. If set to &#x60;false&#x60;, color is not exported.</value>
        [DataMember(Name="exportColor", EmitDefaultValue=false)]
        public bool? ExportColor { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JobStlOutputPayloadAdvanced {\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  ExportColor: ").Append(ExportColor).Append("\n");
            sb.Append("  ExportFileStructure: ").Append(ExportFileStructure).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as JobStlOutputPayloadAdvanced);
        }

        /// <summary>
        /// Returns true if JobStlOutputPayloadAdvanced instances are equal
        /// </summary>
        /// <param name="other">Instance of JobStlOutputPayloadAdvanced to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JobStlOutputPayloadAdvanced other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Format == other.Format ||
                    this.Format != null &&
                    this.Format.Equals(other.Format)
                ) && 
                (
                    this.ExportColor == other.ExportColor ||
                    this.ExportColor != null &&
                    this.ExportColor.Equals(other.ExportColor)
                ) && 
                (
                    this.ExportFileStructure == other.ExportFileStructure ||
                    this.ExportFileStructure != null &&
                    this.ExportFileStructure.Equals(other.ExportFileStructure)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Format != null)
                    hash = hash * 59 + this.Format.GetHashCode();
                if (this.ExportColor != null)
                    hash = hash * 59 + this.ExportColor.GetHashCode();
                if (this.ExportFileStructure != null)
                    hash = hash * 59 + this.ExportFileStructure.GetHashCode();
                return hash;
            }
        }
    }

}

