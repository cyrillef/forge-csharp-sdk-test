/* 
 * Forge SDK
 *
 * The Forge Platform contains an expanding collection of web service components that can be used with Autodesk cloud-based products or your own technologies. Take advantage of Autodeskâ€™s expertise in design and engineering.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: forge.help@autodesk.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Autodesk.Forge.Model
{
    /// <summary>
    /// Children Manifest
    /// </summary>
    [DataContract]
    public partial class ManifestChildren :  IEquatable<ManifestChildren>
    {
        /// <summary>
        /// Type of this JSON object
        /// </summary>
        /// <value>Type of this JSON object</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Resource for "resource"
            /// </summary>
            [EnumMember(Value = "resource")]
            Resource,
            
            /// <summary>
            /// Enum Manifest for "manifest"
            /// </summary>
            [EnumMember(Value = "manifest")]
            Manifest,
            
            /// <summary>
            /// Enum Geometry for "geometry"
            /// </summary>
            [EnumMember(Value = "geometry")]
            Geometry,
            
            /// <summary>
            /// Enum View for "view"
            /// </summary>
            [EnumMember(Value = "view")]
            View
        }

        /// <summary>
        /// Output file type
        /// </summary>
        /// <value>Output file type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RoleEnum
        {
            
            /// <summary>
            /// Enum _2d for "2d"
            /// </summary>
            [EnumMember(Value = "2d")]
            _2d,
            
            /// <summary>
            /// Enum _3d for "3d"
            /// </summary>
            [EnumMember(Value = "3d")]
            _3d,
            
            /// <summary>
            /// Enum Graphics for "graphics"
            /// </summary>
            [EnumMember(Value = "graphics")]
            Graphics,
            
            /// <summary>
            /// Enum Manifest for "manifest"
            /// </summary>
            [EnumMember(Value = "manifest")]
            Manifest,
            
            /// <summary>
            /// Enum Thumbnail for "thumbnail"
            /// </summary>
            [EnumMember(Value = "thumbnail")]
            Thumbnail
        }

        /// <summary>
        /// Status of the requested entity; possible values are: `pending`, `success`, `inprogress`, `failed`, `timeout` and `partialsuccess` 
        /// </summary>
        /// <value>Status of the requested entity; possible values are: `pending`, `success`, `inprogress`, `failed`, `timeout` and `partialsuccess` </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Pending for "pending"
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending,
            
            /// <summary>
            /// Enum Inprogress for "inprogress"
            /// </summary>
            [EnumMember(Value = "inprogress")]
            Inprogress,
            
            /// <summary>
            /// Enum Success for "success"
            /// </summary>
            [EnumMember(Value = "success")]
            Success,
            
            /// <summary>
            /// Enum Failed for "failed"
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed,
            
            /// <summary>
            /// Enum Timeout for "timeout"
            /// </summary>
            [EnumMember(Value = "timeout")]
            Timeout,
            
            /// <summary>
            /// Enum Partialsuccess for "partialsuccess"
            /// </summary>
            [EnumMember(Value = "partialsuccess")]
            Partialsuccess
        }

        /// <summary>
        /// Type of this JSON object
        /// </summary>
        /// <value>Type of this JSON object</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Output file type
        /// </summary>
        /// <value>Output file type</value>
        [DataMember(Name="role", EmitDefaultValue=false)]
        public RoleEnum? Role { get; set; }
        /// <summary>
        /// Status of the requested entity; possible values are: `pending`, `success`, `inprogress`, `failed`, `timeout` and `partialsuccess` 
        /// </summary>
        /// <value>Status of the requested entity; possible values are: `pending`, `success`, `inprogress`, `failed`, `timeout` and `partialsuccess` </value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ManifestChildren" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ManifestChildren() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ManifestChildren" /> class.
        /// </summary>
        /// <param name="Type">Type of this JSON object (required).</param>
        /// <param name="Role">Output file type (required).</param>
        /// <param name="Name">Output file type.</param>
        /// <param name="HasThumbnail">Indicates if a thumbnail has been generated .</param>
        /// <param name="Mime">MIME type of the generated file (required).</param>
        /// <param name="Urn">Output file URN; used as a file identifier.</param>
        /// <param name="Progress">Translation progress for requested entity.</param>
        /// <param name="Status">Status of the requested entity; possible values are: &#x60;pending&#x60;, &#x60;success&#x60;, &#x60;inprogress&#x60;, &#x60;failed&#x60;, &#x60;timeout&#x60; and &#x60;partialsuccess&#x60; .</param>
        /// <param name="Resolution">Available thumbnail resolution.</param>
        /// <param name="ModelGUID">ModelGUID.</param>
        /// <param name="ObjectIds">ObjectIds.</param>
        /// <param name="Messages">Messages.</param>
        public ManifestChildren(TypeEnum? Type = null, RoleEnum? Role = null, string Name = null, bool? HasThumbnail = null, string Mime = null, string Urn = null, string Progress = null, StatusEnum? Status = null, List<string> Resolution = null, string ModelGUID = null, List<int?> ObjectIds = null, Messages Messages = null)
        {
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for ManifestChildren and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
            // to ensure "Role" is required (not null)
            if (Role == null)
            {
                throw new InvalidDataException("Role is a required property for ManifestChildren and cannot be null");
            }
            else
            {
                this.Role = Role;
            }
            // to ensure "Mime" is required (not null)
            if (Mime == null)
            {
                throw new InvalidDataException("Mime is a required property for ManifestChildren and cannot be null");
            }
            else
            {
                this.Mime = Mime;
            }
            this.Name = Name;
            this.HasThumbnail = HasThumbnail;
            this.Urn = Urn;
            this.Progress = Progress;
            this.Status = Status;
            this.Resolution = Resolution;
            this.ModelGUID = ModelGUID;
            this.ObjectIds = ObjectIds;
            this.Messages = Messages;
        }
        
        /// <summary>
        /// Output file type
        /// </summary>
        /// <value>Output file type</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Indicates if a thumbnail has been generated 
        /// </summary>
        /// <value>Indicates if a thumbnail has been generated </value>
        [DataMember(Name="hasThumbnail", EmitDefaultValue=false)]
        public bool? HasThumbnail { get; set; }
        /// <summary>
        /// MIME type of the generated file
        /// </summary>
        /// <value>MIME type of the generated file</value>
        [DataMember(Name="mime", EmitDefaultValue=false)]
        public string Mime { get; set; }
        /// <summary>
        /// Output file URN; used as a file identifier
        /// </summary>
        /// <value>Output file URN; used as a file identifier</value>
        [DataMember(Name="urn", EmitDefaultValue=false)]
        public string Urn { get; set; }
        /// <summary>
        /// Translation progress for requested entity
        /// </summary>
        /// <value>Translation progress for requested entity</value>
        [DataMember(Name="progress", EmitDefaultValue=false)]
        public string Progress { get; set; }
        /// <summary>
        /// Available thumbnail resolution
        /// </summary>
        /// <value>Available thumbnail resolution</value>
        [DataMember(Name="resolution", EmitDefaultValue=false)]
        public List<string> Resolution { get; set; }
        /// <summary>
        /// Gets or Sets ModelGUID
        /// </summary>
        [DataMember(Name="modelGUID", EmitDefaultValue=false)]
        public string ModelGUID { get; set; }
        /// <summary>
        /// Gets or Sets ObjectIds
        /// </summary>
        [DataMember(Name="objectIds", EmitDefaultValue=false)]
        public List<int?> ObjectIds { get; set; }
        /// <summary>
        /// Gets or Sets Messages
        /// </summary>
        [DataMember(Name="messages", EmitDefaultValue=false)]
        public Messages Messages { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ManifestChildren {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  HasThumbnail: ").Append(HasThumbnail).Append("\n");
            sb.Append("  Mime: ").Append(Mime).Append("\n");
            sb.Append("  Urn: ").Append(Urn).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Resolution: ").Append(Resolution).Append("\n");
            sb.Append("  ModelGUID: ").Append(ModelGUID).Append("\n");
            sb.Append("  ObjectIds: ").Append(ObjectIds).Append("\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ManifestChildren);
        }

        /// <summary>
        /// Returns true if ManifestChildren instances are equal
        /// </summary>
        /// <param name="other">Instance of ManifestChildren to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ManifestChildren other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Role == other.Role ||
                    this.Role != null &&
                    this.Role.Equals(other.Role)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.HasThumbnail == other.HasThumbnail ||
                    this.HasThumbnail != null &&
                    this.HasThumbnail.Equals(other.HasThumbnail)
                ) && 
                (
                    this.Mime == other.Mime ||
                    this.Mime != null &&
                    this.Mime.Equals(other.Mime)
                ) && 
                (
                    this.Urn == other.Urn ||
                    this.Urn != null &&
                    this.Urn.Equals(other.Urn)
                ) && 
                (
                    this.Progress == other.Progress ||
                    this.Progress != null &&
                    this.Progress.Equals(other.Progress)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Resolution == other.Resolution ||
                    this.Resolution != null &&
                    this.Resolution.SequenceEqual(other.Resolution)
                ) && 
                (
                    this.ModelGUID == other.ModelGUID ||
                    this.ModelGUID != null &&
                    this.ModelGUID.Equals(other.ModelGUID)
                ) && 
                (
                    this.ObjectIds == other.ObjectIds ||
                    this.ObjectIds != null &&
                    this.ObjectIds.SequenceEqual(other.ObjectIds)
                ) && 
                (
                    this.Messages == other.Messages ||
                    this.Messages != null &&
                    this.Messages.Equals(other.Messages)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Role != null)
                    hash = hash * 59 + this.Role.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.HasThumbnail != null)
                    hash = hash * 59 + this.HasThumbnail.GetHashCode();
                if (this.Mime != null)
                    hash = hash * 59 + this.Mime.GetHashCode();
                if (this.Urn != null)
                    hash = hash * 59 + this.Urn.GetHashCode();
                if (this.Progress != null)
                    hash = hash * 59 + this.Progress.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Resolution != null)
                    hash = hash * 59 + this.Resolution.GetHashCode();
                if (this.ModelGUID != null)
                    hash = hash * 59 + this.ModelGUID.GetHashCode();
                if (this.ObjectIds != null)
                    hash = hash * 59 + this.ObjectIds.GetHashCode();
                if (this.Messages != null)
                    hash = hash * 59 + this.Messages.GetHashCode();
                return hash;
            }
        }
    }

}

