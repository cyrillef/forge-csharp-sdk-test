/* 
 * Forge SDK
 *
 * The Forge Platform contains an expanding collection of web service components that can be used with Autodesk cloud-based products or your own technologies. Take advantage of Autodeskâ€™s expertise in design and engineering.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: forge.help@autodesk.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Autodesk.Forge.Model
{
    /// <summary>
    /// FormatsFormats
    /// </summary>
    [DataContract]
    public partial class FormatsFormats :  IEquatable<FormatsFormats>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FormatsFormats" /> class.
        /// </summary>
        /// <param name="Svf">Svf.</param>
        /// <param name="Thumbnail">Thumbnail.</param>
        /// <param name="Stl">Stl.</param>
        /// <param name="Step">Step.</param>
        /// <param name="Iges">Iges.</param>
        /// <param name="Obj">Obj.</param>
        public FormatsFormats(List<string> Svf = null, List<string> Thumbnail = null, List<string> Stl = null, List<string> Step = null, List<string> Iges = null, List<string> Obj = null)
        {
            this.Svf = Svf;
            this.Thumbnail = Thumbnail;
            this.Stl = Stl;
            this.Step = Step;
            this.Iges = Iges;
            this.Obj = Obj;
        }
        
        /// <summary>
        /// Gets or Sets Svf
        /// </summary>
        [DataMember(Name="svf", EmitDefaultValue=false)]
        public List<string> Svf { get; set; }
        /// <summary>
        /// Gets or Sets Thumbnail
        /// </summary>
        [DataMember(Name="thumbnail", EmitDefaultValue=false)]
        public List<string> Thumbnail { get; set; }
        /// <summary>
        /// Gets or Sets Stl
        /// </summary>
        [DataMember(Name="stl", EmitDefaultValue=false)]
        public List<string> Stl { get; set; }
        /// <summary>
        /// Gets or Sets Step
        /// </summary>
        [DataMember(Name="step", EmitDefaultValue=false)]
        public List<string> Step { get; set; }
        /// <summary>
        /// Gets or Sets Iges
        /// </summary>
        [DataMember(Name="iges", EmitDefaultValue=false)]
        public List<string> Iges { get; set; }
        /// <summary>
        /// Gets or Sets Obj
        /// </summary>
        [DataMember(Name="obj", EmitDefaultValue=false)]
        public List<string> Obj { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FormatsFormats {\n");
            sb.Append("  Svf: ").Append(Svf).Append("\n");
            sb.Append("  Thumbnail: ").Append(Thumbnail).Append("\n");
            sb.Append("  Stl: ").Append(Stl).Append("\n");
            sb.Append("  Step: ").Append(Step).Append("\n");
            sb.Append("  Iges: ").Append(Iges).Append("\n");
            sb.Append("  Obj: ").Append(Obj).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FormatsFormats);
        }

        /// <summary>
        /// Returns true if FormatsFormats instances are equal
        /// </summary>
        /// <param name="other">Instance of FormatsFormats to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FormatsFormats other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Svf == other.Svf ||
                    this.Svf != null &&
                    this.Svf.SequenceEqual(other.Svf)
                ) && 
                (
                    this.Thumbnail == other.Thumbnail ||
                    this.Thumbnail != null &&
                    this.Thumbnail.SequenceEqual(other.Thumbnail)
                ) && 
                (
                    this.Stl == other.Stl ||
                    this.Stl != null &&
                    this.Stl.SequenceEqual(other.Stl)
                ) && 
                (
                    this.Step == other.Step ||
                    this.Step != null &&
                    this.Step.SequenceEqual(other.Step)
                ) && 
                (
                    this.Iges == other.Iges ||
                    this.Iges != null &&
                    this.Iges.SequenceEqual(other.Iges)
                ) && 
                (
                    this.Obj == other.Obj ||
                    this.Obj != null &&
                    this.Obj.SequenceEqual(other.Obj)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Svf != null)
                    hash = hash * 59 + this.Svf.GetHashCode();
                if (this.Thumbnail != null)
                    hash = hash * 59 + this.Thumbnail.GetHashCode();
                if (this.Stl != null)
                    hash = hash * 59 + this.Stl.GetHashCode();
                if (this.Step != null)
                    hash = hash * 59 + this.Step.GetHashCode();
                if (this.Iges != null)
                    hash = hash * 59 + this.Iges.GetHashCode();
                if (this.Obj != null)
                    hash = hash * 59 + this.Obj.GetHashCode();
                return hash;
            }
        }
    }

}

