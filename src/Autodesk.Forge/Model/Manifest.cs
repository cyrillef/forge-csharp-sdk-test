/* 
 * Forge SDK
 *
 * The Forge Platform contains an expanding collection of web service components that can be used with Autodesk cloud-based products or your own technologies. Take advantage of Autodesk’s expertise in design and engineering.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: forge.help@autodesk.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Autodesk.Forge.Model
{
    /// <summary>
    /// Manifest
    /// </summary>
    [DataContract]
    public partial class Manifest :  IEquatable<Manifest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Manifest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Manifest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Manifest" /> class.
        /// </summary>
        /// <param name="Urn">The Base64 (URL safe) encoded source file URN (required).</param>
        /// <param name="Type">Type of this JSON object (required).</param>
        /// <param name="Progress">Overall progress for all translation jobs in the manifest. Possible values are: &#x60;complete&#x60; or &#x60;##%&#x60;  (required).</param>
        /// <param name="Status">Overall status for translation jobs in the “manifest”. Possible values are: &#x60;pending&#x60;, &#x60;success&#x60;, &#x60;inprogress&#x60;, &#x60;failed&#x60; and &#x60;timeout&#x60;  (required).</param>
        /// <param name="HasThumbnail">Indicates if a thumbnail has been generated for the source file URN (required).</param>
        /// <param name="Region">Region .</param>
        /// <param name="Derivatives">Requested output files for the source file URN (required).</param>
        public Manifest(string Urn = null, string Type = null, string Progress = null, string Status = null, bool? HasThumbnail = null, string Region = null, List<ManifestDerivative> Derivatives = null)
        {
            // to ensure "Urn" is required (not null)
            if (Urn == null)
            {
                throw new InvalidDataException("Urn is a required property for Manifest and cannot be null");
            }
            else
            {
                this.Urn = Urn;
            }
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for Manifest and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
            // to ensure "Progress" is required (not null)
            if (Progress == null)
            {
                throw new InvalidDataException("Progress is a required property for Manifest and cannot be null");
            }
            else
            {
                this.Progress = Progress;
            }
            // to ensure "Status" is required (not null)
            if (Status == null)
            {
                throw new InvalidDataException("Status is a required property for Manifest and cannot be null");
            }
            else
            {
                this.Status = Status;
            }
            // to ensure "HasThumbnail" is required (not null)
            if (HasThumbnail == null)
            {
                throw new InvalidDataException("HasThumbnail is a required property for Manifest and cannot be null");
            }
            else
            {
                this.HasThumbnail = HasThumbnail;
            }
            // to ensure "Derivatives" is required (not null)
            if (Derivatives == null)
            {
                throw new InvalidDataException("Derivatives is a required property for Manifest and cannot be null");
            }
            else
            {
                this.Derivatives = Derivatives;
            }
            this.Region = Region;
        }
        
        /// <summary>
        /// The Base64 (URL safe) encoded source file URN
        /// </summary>
        /// <value>The Base64 (URL safe) encoded source file URN</value>
        [DataMember(Name="urn", EmitDefaultValue=false)]
        public string Urn { get; set; }
        /// <summary>
        /// Type of this JSON object
        /// </summary>
        /// <value>Type of this JSON object</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Overall progress for all translation jobs in the manifest. Possible values are: &#x60;complete&#x60; or &#x60;##%&#x60; 
        /// </summary>
        /// <value>Overall progress for all translation jobs in the manifest. Possible values are: &#x60;complete&#x60; or &#x60;##%&#x60; </value>
        [DataMember(Name="progress", EmitDefaultValue=false)]
        public string Progress { get; set; }
        /// <summary>
        /// Overall status for translation jobs in the “manifest”. Possible values are: &#x60;pending&#x60;, &#x60;success&#x60;, &#x60;inprogress&#x60;, &#x60;failed&#x60; and &#x60;timeout&#x60; 
        /// </summary>
        /// <value>Overall status for translation jobs in the “manifest”. Possible values are: &#x60;pending&#x60;, &#x60;success&#x60;, &#x60;inprogress&#x60;, &#x60;failed&#x60; and &#x60;timeout&#x60; </value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// Indicates if a thumbnail has been generated for the source file URN
        /// </summary>
        /// <value>Indicates if a thumbnail has been generated for the source file URN</value>
        [DataMember(Name="hasThumbnail", EmitDefaultValue=false)]
        public bool? HasThumbnail { get; set; }
        /// <summary>
        /// Region 
        /// </summary>
        /// <value>Region </value>
        [DataMember(Name="region", EmitDefaultValue=false)]
        public string Region { get; set; }
        /// <summary>
        /// Requested output files for the source file URN
        /// </summary>
        /// <value>Requested output files for the source file URN</value>
        [DataMember(Name="derivatives", EmitDefaultValue=false)]
        public List<ManifestDerivative> Derivatives { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Manifest {\n");
            sb.Append("  Urn: ").Append(Urn).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  HasThumbnail: ").Append(HasThumbnail).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  Derivatives: ").Append(Derivatives).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Manifest);
        }

        /// <summary>
        /// Returns true if Manifest instances are equal
        /// </summary>
        /// <param name="other">Instance of Manifest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Manifest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Urn == other.Urn ||
                    this.Urn != null &&
                    this.Urn.Equals(other.Urn)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Progress == other.Progress ||
                    this.Progress != null &&
                    this.Progress.Equals(other.Progress)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.HasThumbnail == other.HasThumbnail ||
                    this.HasThumbnail != null &&
                    this.HasThumbnail.Equals(other.HasThumbnail)
                ) && 
                (
                    this.Region == other.Region ||
                    this.Region != null &&
                    this.Region.Equals(other.Region)
                ) && 
                (
                    this.Derivatives == other.Derivatives ||
                    this.Derivatives != null &&
                    this.Derivatives.SequenceEqual(other.Derivatives)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Urn != null)
                    hash = hash * 59 + this.Urn.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Progress != null)
                    hash = hash * 59 + this.Progress.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.HasThumbnail != null)
                    hash = hash * 59 + this.HasThumbnail.GetHashCode();
                if (this.Region != null)
                    hash = hash * 59 + this.Region.GetHashCode();
                if (this.Derivatives != null)
                    hash = hash * 59 + this.Derivatives.GetHashCode();
                return hash;
            }
        }
    }

}

