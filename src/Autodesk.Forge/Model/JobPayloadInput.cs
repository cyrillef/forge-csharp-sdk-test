/* 
 * Forge SDK
 *
 * The Forge Platform contains an expanding collection of web service components that can be used with Autodesk cloud-based products or your own technologies. Take advantage of Autodeskâ€™s expertise in design and engineering.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: forge.help@autodesk.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Autodesk.Forge.Model
{
    /// <summary>
    /// Group of inputs
    /// </summary>
    [DataContract]
    public partial class JobPayloadInput :  IEquatable<JobPayloadInput>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobPayloadInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected JobPayloadInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="JobPayloadInput" /> class.
        /// </summary>
        /// <param name="Urn">The design URN; returned when uploading the file to Forge The URN needs to be [Base64 (URL Safe) encoded](https://developer.autodesk.com/en/docs/model-derivative/v2/reference/http/job-POST/#id3).  (required).</param>
        /// <param name="CompressedUrn">Set this to &#x60;true&#x60; if the source file is compressed. If set to &#x60;true&#x60;, you need to define the &#x60;rootFilename&#x60;. (default to false).</param>
        /// <param name="RootFilename">The root filename of the compressed file. Mandatory if the &#x60;compressedUrn&#x60; is set to &#x60;true&#x60;..</param>
        public JobPayloadInput(string Urn = null, bool? CompressedUrn = null, string RootFilename = null)
        {
            // to ensure "Urn" is required (not null)
            if (Urn == null)
            {
                throw new InvalidDataException("Urn is a required property for JobPayloadInput and cannot be null");
            }
            else
            {
                this.Urn = Urn;
            }
            // use default value if no "CompressedUrn" provided
            if (CompressedUrn == null)
            {
                this.CompressedUrn = false;
            }
            else
            {
                this.CompressedUrn = CompressedUrn;
            }
            this.RootFilename = RootFilename;
        }
        
        /// <summary>
        /// The design URN; returned when uploading the file to Forge The URN needs to be [Base64 (URL Safe) encoded](https://developer.autodesk.com/en/docs/model-derivative/v2/reference/http/job-POST/#id3). 
        /// </summary>
        /// <value>The design URN; returned when uploading the file to Forge The URN needs to be [Base64 (URL Safe) encoded](https://developer.autodesk.com/en/docs/model-derivative/v2/reference/http/job-POST/#id3). </value>
        [DataMember(Name="urn", EmitDefaultValue=false)]
        public string Urn { get; set; }
        /// <summary>
        /// Set this to &#x60;true&#x60; if the source file is compressed. If set to &#x60;true&#x60;, you need to define the &#x60;rootFilename&#x60;.
        /// </summary>
        /// <value>Set this to &#x60;true&#x60; if the source file is compressed. If set to &#x60;true&#x60;, you need to define the &#x60;rootFilename&#x60;.</value>
        [DataMember(Name="compressedUrn", EmitDefaultValue=false)]
        public bool? CompressedUrn { get; set; }
        /// <summary>
        /// The root filename of the compressed file. Mandatory if the &#x60;compressedUrn&#x60; is set to &#x60;true&#x60;.
        /// </summary>
        /// <value>The root filename of the compressed file. Mandatory if the &#x60;compressedUrn&#x60; is set to &#x60;true&#x60;.</value>
        [DataMember(Name="rootFilename", EmitDefaultValue=false)]
        public string RootFilename { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JobPayloadInput {\n");
            sb.Append("  Urn: ").Append(Urn).Append("\n");
            sb.Append("  CompressedUrn: ").Append(CompressedUrn).Append("\n");
            sb.Append("  RootFilename: ").Append(RootFilename).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as JobPayloadInput);
        }

        /// <summary>
        /// Returns true if JobPayloadInput instances are equal
        /// </summary>
        /// <param name="other">Instance of JobPayloadInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JobPayloadInput other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Urn == other.Urn ||
                    this.Urn != null &&
                    this.Urn.Equals(other.Urn)
                ) && 
                (
                    this.CompressedUrn == other.CompressedUrn ||
                    this.CompressedUrn != null &&
                    this.CompressedUrn.Equals(other.CompressedUrn)
                ) && 
                (
                    this.RootFilename == other.RootFilename ||
                    this.RootFilename != null &&
                    this.RootFilename.Equals(other.RootFilename)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Urn != null)
                    hash = hash * 59 + this.Urn.GetHashCode();
                if (this.CompressedUrn != null)
                    hash = hash * 59 + this.CompressedUrn.GetHashCode();
                if (this.RootFilename != null)
                    hash = hash * 59 + this.RootFilename.GetHashCode();
                return hash;
            }
        }
    }

}

