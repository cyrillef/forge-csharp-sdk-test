/* 
 * Forge SDK
 *
 * The Forge Platform contains an expanding collection of web service components that can be used with Autodesk cloud-based products or your own technologies. Take advantage of Autodeskâ€™s expertise in design and engineering.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: forge.help@autodesk.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Autodesk.Forge.Model
{
    /// <summary>
    /// Activity
    /// </summary>
    [DataContract]
    public partial class Activity :  IEquatable<Activity>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Activity" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Activity() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Activity" /> class.
        /// </summary>
        /// <param name="Id">Id (required).</param>
        /// <param name="Instruction">Instruction (required).</param>
        /// <param name="AppPackages">AppPackages (required).</param>
        /// <param name="RequiredEngineVersion">RequiredEngineVersion (required).</param>
        /// <param name="Parameters">Parameters (required).</param>
        /// <param name="AllowedChildProcesses">AllowedChildProcesses (required).</param>
        /// <param name="Version">Version (required).</param>
        /// <param name="Description">Description.</param>
        /// <param name="HostApplication">HostApplication.</param>
        /// <param name="IsPublic">IsPublic (required).</param>
        public Activity(string Id = null, Object Instruction = null, List<string> AppPackages = null, string RequiredEngineVersion = null, Object Parameters = null, List<Object> AllowedChildProcesses = null, int? Version = null, string Description = null, string HostApplication = null, bool? IsPublic = null)
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for Activity and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "Instruction" is required (not null)
            if (Instruction == null)
            {
                throw new InvalidDataException("Instruction is a required property for Activity and cannot be null");
            }
            else
            {
                this.Instruction = Instruction;
            }
            // to ensure "AppPackages" is required (not null)
            if (AppPackages == null)
            {
                throw new InvalidDataException("AppPackages is a required property for Activity and cannot be null");
            }
            else
            {
                this.AppPackages = AppPackages;
            }
            // to ensure "RequiredEngineVersion" is required (not null)
            if (RequiredEngineVersion == null)
            {
                throw new InvalidDataException("RequiredEngineVersion is a required property for Activity and cannot be null");
            }
            else
            {
                this.RequiredEngineVersion = RequiredEngineVersion;
            }
            // to ensure "Parameters" is required (not null)
            if (Parameters == null)
            {
                throw new InvalidDataException("Parameters is a required property for Activity and cannot be null");
            }
            else
            {
                this.Parameters = Parameters;
            }
            // to ensure "AllowedChildProcesses" is required (not null)
            if (AllowedChildProcesses == null)
            {
                throw new InvalidDataException("AllowedChildProcesses is a required property for Activity and cannot be null");
            }
            else
            {
                this.AllowedChildProcesses = AllowedChildProcesses;
            }
            // to ensure "Version" is required (not null)
            if (Version == null)
            {
                throw new InvalidDataException("Version is a required property for Activity and cannot be null");
            }
            else
            {
                this.Version = Version;
            }
            // to ensure "IsPublic" is required (not null)
            if (IsPublic == null)
            {
                throw new InvalidDataException("IsPublic is a required property for Activity and cannot be null");
            }
            else
            {
                this.IsPublic = IsPublic;
            }
            this.Description = Description;
            this.HostApplication = HostApplication;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets Instruction
        /// </summary>
        [DataMember(Name="Instruction", EmitDefaultValue=false)]
        public Object Instruction { get; set; }
        /// <summary>
        /// Gets or Sets AppPackages
        /// </summary>
        [DataMember(Name="AppPackages", EmitDefaultValue=false)]
        public List<string> AppPackages { get; set; }
        /// <summary>
        /// Gets or Sets RequiredEngineVersion
        /// </summary>
        [DataMember(Name="RequiredEngineVersion", EmitDefaultValue=false)]
        public string RequiredEngineVersion { get; set; }
        /// <summary>
        /// Gets or Sets Parameters
        /// </summary>
        [DataMember(Name="Parameters", EmitDefaultValue=false)]
        public Object Parameters { get; set; }
        /// <summary>
        /// Gets or Sets AllowedChildProcesses
        /// </summary>
        [DataMember(Name="AllowedChildProcesses", EmitDefaultValue=false)]
        public List<Object> AllowedChildProcesses { get; set; }
        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="Version", EmitDefaultValue=false)]
        public int? Version { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets HostApplication
        /// </summary>
        [DataMember(Name="HostApplication", EmitDefaultValue=false)]
        public string HostApplication { get; set; }
        /// <summary>
        /// Gets or Sets IsPublic
        /// </summary>
        [DataMember(Name="IsPublic", EmitDefaultValue=false)]
        public bool? IsPublic { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Activity {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Instruction: ").Append(Instruction).Append("\n");
            sb.Append("  AppPackages: ").Append(AppPackages).Append("\n");
            sb.Append("  RequiredEngineVersion: ").Append(RequiredEngineVersion).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  AllowedChildProcesses: ").Append(AllowedChildProcesses).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  HostApplication: ").Append(HostApplication).Append("\n");
            sb.Append("  IsPublic: ").Append(IsPublic).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Activity);
        }

        /// <summary>
        /// Returns true if Activity instances are equal
        /// </summary>
        /// <param name="other">Instance of Activity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Activity other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Instruction == other.Instruction ||
                    this.Instruction != null &&
                    this.Instruction.Equals(other.Instruction)
                ) && 
                (
                    this.AppPackages == other.AppPackages ||
                    this.AppPackages != null &&
                    this.AppPackages.SequenceEqual(other.AppPackages)
                ) && 
                (
                    this.RequiredEngineVersion == other.RequiredEngineVersion ||
                    this.RequiredEngineVersion != null &&
                    this.RequiredEngineVersion.Equals(other.RequiredEngineVersion)
                ) && 
                (
                    this.Parameters == other.Parameters ||
                    this.Parameters != null &&
                    this.Parameters.Equals(other.Parameters)
                ) && 
                (
                    this.AllowedChildProcesses == other.AllowedChildProcesses ||
                    this.AllowedChildProcesses != null &&
                    this.AllowedChildProcesses.SequenceEqual(other.AllowedChildProcesses)
                ) && 
                (
                    this.Version == other.Version ||
                    this.Version != null &&
                    this.Version.Equals(other.Version)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.HostApplication == other.HostApplication ||
                    this.HostApplication != null &&
                    this.HostApplication.Equals(other.HostApplication)
                ) && 
                (
                    this.IsPublic == other.IsPublic ||
                    this.IsPublic != null &&
                    this.IsPublic.Equals(other.IsPublic)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Instruction != null)
                    hash = hash * 59 + this.Instruction.GetHashCode();
                if (this.AppPackages != null)
                    hash = hash * 59 + this.AppPackages.GetHashCode();
                if (this.RequiredEngineVersion != null)
                    hash = hash * 59 + this.RequiredEngineVersion.GetHashCode();
                if (this.Parameters != null)
                    hash = hash * 59 + this.Parameters.GetHashCode();
                if (this.AllowedChildProcesses != null)
                    hash = hash * 59 + this.AllowedChildProcesses.GetHashCode();
                if (this.Version != null)
                    hash = hash * 59 + this.Version.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.HostApplication != null)
                    hash = hash * 59 + this.HostApplication.GetHashCode();
                if (this.IsPublic != null)
                    hash = hash * 59 + this.IsPublic.GetHashCode();
                return hash;
            }
        }
    }

}

