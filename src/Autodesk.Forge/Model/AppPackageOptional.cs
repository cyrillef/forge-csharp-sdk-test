/* 
 * Forge SDK
 *
 * The Forge Platform contains an expanding collection of web service components that can be used with Autodesk cloud-based products or your own technologies. Take advantage of Autodeskâ€™s expertise in design and engineering.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: forge.help@autodesk.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Autodesk.Forge.Model
{
    /// <summary>
    /// AppPackageOptional
    /// </summary>
    [DataContract]
    public partial class AppPackageOptional :  IEquatable<AppPackageOptional>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppPackageOptional" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Resource">Resource.</param>
        /// <param name="References">References.</param>
        /// <param name="RequiredEngineVersion">RequiredEngineVersion.</param>
        /// <param name="Version">Version.</param>
        /// <param name="Description">Description.</param>
        /// <param name="IsPublic">IsPublic.</param>
        /// <param name="IsObjectEnabler">IsObjectEnabler.</param>
        public AppPackageOptional(string Id = null, string Resource = null, List<string> References = null, string RequiredEngineVersion = null, int? Version = null, string Description = null, bool? IsPublic = null, bool? IsObjectEnabler = null)
        {
            this.Id = Id;
            this.Resource = Resource;
            this.References = References;
            this.RequiredEngineVersion = RequiredEngineVersion;
            this.Version = Version;
            this.Description = Description;
            this.IsPublic = IsPublic;
            this.IsObjectEnabler = IsObjectEnabler;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets Resource
        /// </summary>
        [DataMember(Name="Resource", EmitDefaultValue=false)]
        public string Resource { get; set; }
        /// <summary>
        /// Gets or Sets References
        /// </summary>
        [DataMember(Name="References", EmitDefaultValue=false)]
        public List<string> References { get; set; }
        /// <summary>
        /// Gets or Sets RequiredEngineVersion
        /// </summary>
        [DataMember(Name="RequiredEngineVersion", EmitDefaultValue=false)]
        public string RequiredEngineVersion { get; set; }
        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="Version", EmitDefaultValue=false)]
        public int? Version { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets IsPublic
        /// </summary>
        [DataMember(Name="IsPublic", EmitDefaultValue=false)]
        public bool? IsPublic { get; set; }
        /// <summary>
        /// Gets or Sets IsObjectEnabler
        /// </summary>
        [DataMember(Name="IsObjectEnabler", EmitDefaultValue=false)]
        public bool? IsObjectEnabler { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AppPackageOptional {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Resource: ").Append(Resource).Append("\n");
            sb.Append("  References: ").Append(References).Append("\n");
            sb.Append("  RequiredEngineVersion: ").Append(RequiredEngineVersion).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IsPublic: ").Append(IsPublic).Append("\n");
            sb.Append("  IsObjectEnabler: ").Append(IsObjectEnabler).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AppPackageOptional);
        }

        /// <summary>
        /// Returns true if AppPackageOptional instances are equal
        /// </summary>
        /// <param name="other">Instance of AppPackageOptional to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppPackageOptional other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Resource == other.Resource ||
                    this.Resource != null &&
                    this.Resource.Equals(other.Resource)
                ) && 
                (
                    this.References == other.References ||
                    this.References != null &&
                    this.References.SequenceEqual(other.References)
                ) && 
                (
                    this.RequiredEngineVersion == other.RequiredEngineVersion ||
                    this.RequiredEngineVersion != null &&
                    this.RequiredEngineVersion.Equals(other.RequiredEngineVersion)
                ) && 
                (
                    this.Version == other.Version ||
                    this.Version != null &&
                    this.Version.Equals(other.Version)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.IsPublic == other.IsPublic ||
                    this.IsPublic != null &&
                    this.IsPublic.Equals(other.IsPublic)
                ) && 
                (
                    this.IsObjectEnabler == other.IsObjectEnabler ||
                    this.IsObjectEnabler != null &&
                    this.IsObjectEnabler.Equals(other.IsObjectEnabler)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Resource != null)
                    hash = hash * 59 + this.Resource.GetHashCode();
                if (this.References != null)
                    hash = hash * 59 + this.References.GetHashCode();
                if (this.RequiredEngineVersion != null)
                    hash = hash * 59 + this.RequiredEngineVersion.GetHashCode();
                if (this.Version != null)
                    hash = hash * 59 + this.Version.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.IsPublic != null)
                    hash = hash * 59 + this.IsPublic.GetHashCode();
                if (this.IsObjectEnabler != null)
                    hash = hash * 59 + this.IsObjectEnabler.GetHashCode();
                return hash;
            }
        }
    }

}

