/* 
 * Forge SDK
 *
 * The Forge Platform contains an expanding collection of web service components that can be used with Autodesk cloud-based products or your own technologies. Take advantage of Autodeskâ€™s expertise in design and engineering.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: forge.help@autodesk.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Newtonsoft.Json.Linq;
using Autodesk.Forge.Client;
using Autodesk.Forge.Model;

namespace Autodesk.Forge
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IActivitiesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new Activity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activity"></param>
        /// <returns>Activity</returns>
        /*Activity*/dynamic CreateActivity (Activity activity);

        /// <summary>
        /// Creates a new Activity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activity"></param>
        /// <returns>ApiResponse of Activity</returns>
        ApiResponse</*Activity*/dynamic> CreateActivityWithHttpInfo (Activity activity);
        /// <summary>
        /// Removes a specific Activity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteActivity (string id);

        /// <summary>
        /// Removes a specific Activity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteActivityWithHttpInfo (string id);
        /// <summary>
        /// Removes the version history of the specified Activity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteActivityHistory (string id);

        /// <summary>
        /// Removes the version history of the specified Activity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteActivityHistoryWithHttpInfo (string id);
        /// <summary>
        /// Returns the details of a specific Activity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Activity</returns>
        /*Activity*/dynamic GetActivity (string id);

        /// <summary>
        /// Returns the details of a specific Activity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Activity</returns>
        ApiResponse</*Activity*/dynamic> GetActivityWithHttpInfo (string id);
        /// <summary>
        /// Returns all old versions of a specified Activity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>List&lt;Activity&gt;</returns>
        /*List<Activity>*/dynamic GetActivityVersions (string id);

        /// <summary>
        /// Returns all old versions of a specified Activity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of List&lt;Activity&gt;</returns>
        ApiResponse</*List<Activity>*/dynamic> GetActivityVersionsWithHttpInfo (string id);
        /// <summary>
        /// Returns the details of all Activities.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Activity&gt;</returns>
        /*List<Activity>*/dynamic GetAllActivities ();

        /// <summary>
        /// Returns the details of all Activities.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Activity&gt;</returns>
        ApiResponse</*List<Activity>*/dynamic> GetAllActivitiesWithHttpInfo ();
        /// <summary>
        /// Updates an Activity by specifying only the changed attributes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="activity"></param>
        /// <returns></returns>
        void PatchActivity (string id, ActivityOptional activity);

        /// <summary>
        /// Updates an Activity by specifying only the changed attributes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="activity"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PatchActivityWithHttpInfo (string id, ActivityOptional activity);
        /// <summary>
        /// Sets the Activity to the specified version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="activityVersion"></param>
        /// <returns></returns>
        void SetActivityVersion (string id, ActivityVersion activityVersion);

        /// <summary>
        /// Sets the Activity to the specified version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="activityVersion"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetActivityVersionWithHttpInfo (string id, ActivityVersion activityVersion);
        /// <summary>
        /// Updates an Activity by redefining the entire Activity object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="activity"></param>
        /// <returns></returns>
        void UpdateActivity (string id, Activity activity);

        /// <summary>
        /// Updates an Activity by redefining the entire Activity object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="activity"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateActivityWithHttpInfo (string id, Activity activity);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new Activity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activity"></param>
        /// <returns>Task of Activity</returns>
        System.Threading.Tasks.Task</*Activity*/dynamic> CreateActivityAsync (Activity activity);

        /// <summary>
        /// Creates a new Activity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activity"></param>
        /// <returns>Task of ApiResponse (Activity)</returns>
        System.Threading.Tasks.Task<ApiResponse</*Activity*/dynamic>> CreateActivityAsyncWithHttpInfo (Activity activity);
        /// <summary>
        /// Removes a specific Activity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteActivityAsync (string id);

        /// <summary>
        /// Removes a specific Activity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteActivityAsyncWithHttpInfo (string id);
        /// <summary>
        /// Removes the version history of the specified Activity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteActivityHistoryAsync (string id);

        /// <summary>
        /// Removes the version history of the specified Activity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteActivityHistoryAsyncWithHttpInfo (string id);
        /// <summary>
        /// Returns the details of a specific Activity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Activity</returns>
        System.Threading.Tasks.Task</*Activity*/dynamic> GetActivityAsync (string id);

        /// <summary>
        /// Returns the details of a specific Activity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Activity)</returns>
        System.Threading.Tasks.Task<ApiResponse</*Activity*/dynamic>> GetActivityAsyncWithHttpInfo (string id);
        /// <summary>
        /// Returns all old versions of a specified Activity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of List&lt;Activity&gt;</returns>
        System.Threading.Tasks.Task</*List<Activity>*/dynamic> GetActivityVersionsAsync (string id);

        /// <summary>
        /// Returns all old versions of a specified Activity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (List&lt;Activity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse</*List<Activity>*/dynamic>> GetActivityVersionsAsyncWithHttpInfo (string id);
        /// <summary>
        /// Returns the details of all Activities.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Activity&gt;</returns>
        System.Threading.Tasks.Task</*List<Activity>*/dynamic> GetAllActivitiesAsync ();

        /// <summary>
        /// Returns the details of all Activities.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Activity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse</*List<Activity>*/dynamic>> GetAllActivitiesAsyncWithHttpInfo ();
        /// <summary>
        /// Updates an Activity by specifying only the changed attributes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="activity"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PatchActivityAsync (string id, ActivityOptional activity);

        /// <summary>
        /// Updates an Activity by specifying only the changed attributes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="activity"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PatchActivityAsyncWithHttpInfo (string id, ActivityOptional activity);
        /// <summary>
        /// Sets the Activity to the specified version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="activityVersion"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetActivityVersionAsync (string id, ActivityVersion activityVersion);

        /// <summary>
        /// Sets the Activity to the specified version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="activityVersion"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetActivityVersionAsyncWithHttpInfo (string id, ActivityVersion activityVersion);
        /// <summary>
        /// Updates an Activity by redefining the entire Activity object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="activity"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateActivityAsync (string id, Activity activity);

        /// <summary>
        /// Updates an Activity by redefining the entire Activity object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="activity"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateActivityAsyncWithHttpInfo (string id, Activity activity);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ActivitiesApi : IActivitiesApi
    {
        private Autodesk.Forge.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ActivitiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ActivitiesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Autodesk.Forge.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ActivitiesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ActivitiesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Autodesk.Forge.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Autodesk.Forge.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates a new Activity. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activity"></param>
        /// <returns>Activity</returns>
        public /*Activity*/dynamic CreateActivity (Activity activity)
        {
             ApiResponse</*Activity*/dynamic> localVarResponse = CreateActivityWithHttpInfo(activity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new Activity. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activity"></param>
        /// <returns>ApiResponse of Activity</returns>
        public ApiResponse< /*Activity*/dynamic > CreateActivityWithHttpInfo (Activity activity)
        {
            // verify the required parameter 'activity' is set
            if (activity == null)
                throw new ApiException(400, "Missing required parameter 'activity' when calling ActivitiesApi->CreateActivity");

            var localVarPath = "/autocad.io/us-east/v2/Activities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (activity != null && activity.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = activity; // byte array
            }
            else if (   activity != null
                     && (   activity.GetType() == typeof(System.IO.FileStream)
                         || activity.GetType() == typeof(System.IO.BinaryReader)
                         || activity.GetType() == typeof(System.IO.BufferedStream)
                   	     || activity.GetType() == typeof(System.IO.MemoryStream)
                   	     || activity.GetType() == typeof(System.IO.StreamReader)
                   	    )
                    )
            {
                localVarPostBody =Configuration.ApiClient.toByteArray(activity); // byte array
            }
            else if ( activity != null )
            {
                localVarPostBody = Configuration.ApiClient.Serialize(activity);
            }

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*Activity*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(Activity)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(Activity)));
            
        }

        /// <summary>
        /// Creates a new Activity. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activity"></param>
        /// <returns>Task of Activity</returns>
        public async System.Threading.Tasks.Task</*Activity*/dynamic> CreateActivityAsync (Activity activity)
        {
             ApiResponse</*Activity*/dynamic> localVarResponse = await CreateActivityAsyncWithHttpInfo(activity);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new Activity. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activity"></param>
        /// <returns>Task of ApiResponse (Activity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*Activity*/dynamic>> CreateActivityAsyncWithHttpInfo (Activity activity)
        {
            // verify the required parameter 'activity' is set
            if (activity == null)
                throw new ApiException(400, "Missing required parameter 'activity' when calling ActivitiesApi->CreateActivity");

            var localVarPath = "/autocad.io/us-east/v2/Activities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (activity != null && activity.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = activity; // byte array
            }
            else if (   activity != null
                     && (   activity.GetType() == typeof(System.IO.FileStream)
                         || activity.GetType() == typeof(System.IO.BinaryReader)
                         || activity.GetType() == typeof(System.IO.BufferedStream)
                   	     || activity.GetType() == typeof(System.IO.MemoryStream)
                   	     || activity.GetType() == typeof(System.IO.StreamReader)
                   	    )
                    )
            {
                localVarPostBody =Configuration.ApiClient.toByteArray(activity); // byte array
            }
            else if ( activity != null )
            {
                localVarPostBody = Configuration.ApiClient.Serialize(activity);
            }

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*Activity*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(Activity)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(Activity)));
            
        }

        /// <summary>
        /// Removes a specific Activity. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteActivity (string id)
        {
             DeleteActivityWithHttpInfo(id);
        }

        /// <summary>
        /// Removes a specific Activity. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteActivityWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->DeleteActivity");

            var localVarPath = "/autocad.io/us-east/v2/Activities(&#39;{id}&#39;)";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Removes a specific Activity. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteActivityAsync (string id)
        {
             await DeleteActivityAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Removes a specific Activity. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteActivityAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->DeleteActivity");

            var localVarPath = "/autocad.io/us-east/v2/Activities(&#39;{id}&#39;)";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Removes the version history of the specified Activity. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteActivityHistory (string id)
        {
             DeleteActivityHistoryWithHttpInfo(id);
        }

        /// <summary>
        /// Removes the version history of the specified Activity. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteActivityHistoryWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->DeleteActivityHistory");

            var localVarPath = "/autocad.io/us-east/v2/Activities(&#39;{id}&#39;)/Operations.DeleteHistory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteActivityHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Removes the version history of the specified Activity. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteActivityHistoryAsync (string id)
        {
             await DeleteActivityHistoryAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Removes the version history of the specified Activity. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteActivityHistoryAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->DeleteActivityHistory");

            var localVarPath = "/autocad.io/us-east/v2/Activities(&#39;{id}&#39;)/Operations.DeleteHistory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteActivityHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns the details of a specific Activity. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Activity</returns>
        public /*Activity*/dynamic GetActivity (string id)
        {
             ApiResponse</*Activity*/dynamic> localVarResponse = GetActivityWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the details of a specific Activity. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Activity</returns>
        public ApiResponse< /*Activity*/dynamic > GetActivityWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->GetActivity");

            var localVarPath = "/autocad.io/us-east/v2/Activities(&#39;{id}&#39;)";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*Activity*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(Activity)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(Activity)));
            
        }

        /// <summary>
        /// Returns the details of a specific Activity. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Activity</returns>
        public async System.Threading.Tasks.Task</*Activity*/dynamic> GetActivityAsync (string id)
        {
             ApiResponse</*Activity*/dynamic> localVarResponse = await GetActivityAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the details of a specific Activity. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Activity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*Activity*/dynamic>> GetActivityAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->GetActivity");

            var localVarPath = "/autocad.io/us-east/v2/Activities(&#39;{id}&#39;)";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*Activity*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(Activity)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(Activity)));
            
        }

        /// <summary>
        /// Returns all old versions of a specified Activity. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>List&lt;Activity&gt;</returns>
        public /*List<Activity>*/dynamic GetActivityVersions (string id)
        {
             ApiResponse</*List<Activity>*/dynamic> localVarResponse = GetActivityVersionsWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all old versions of a specified Activity. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of List&lt;Activity&gt;</returns>
        public ApiResponse< /*List<Activity>*/dynamic > GetActivityVersionsWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->GetActivityVersions");

            var localVarPath = "/autocad.io/us-east/v2/Activities(&#39;{id}&#39;)/Operations.GetVersions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetActivityVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*List<Activity>*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(List<Activity>)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Activity>)));
            
        }

        /// <summary>
        /// Returns all old versions of a specified Activity. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of List&lt;Activity&gt;</returns>
        public async System.Threading.Tasks.Task</*List<Activity>*/dynamic> GetActivityVersionsAsync (string id)
        {
             ApiResponse</*List<Activity>*/dynamic> localVarResponse = await GetActivityVersionsAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all old versions of a specified Activity. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (List&lt;Activity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*List<Activity>*/dynamic>> GetActivityVersionsAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->GetActivityVersions");

            var localVarPath = "/autocad.io/us-east/v2/Activities(&#39;{id}&#39;)/Operations.GetVersions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetActivityVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*List<Activity>*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(List<Activity>)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Activity>)));
            
        }

        /// <summary>
        /// Returns the details of all Activities. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Activity&gt;</returns>
        public /*List<Activity>*/dynamic GetAllActivities ()
        {
             ApiResponse</*List<Activity>*/dynamic> localVarResponse = GetAllActivitiesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the details of all Activities. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Activity&gt;</returns>
        public ApiResponse< /*List<Activity>*/dynamic > GetAllActivitiesWithHttpInfo ()
        {

            var localVarPath = "/autocad.io/us-east/v2/Activities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllActivities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*List<Activity>*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(List<Activity>)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Activity>)));
            
        }

        /// <summary>
        /// Returns the details of all Activities. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Activity&gt;</returns>
        public async System.Threading.Tasks.Task</*List<Activity>*/dynamic> GetAllActivitiesAsync ()
        {
             ApiResponse</*List<Activity>*/dynamic> localVarResponse = await GetAllActivitiesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the details of all Activities. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Activity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*List<Activity>*/dynamic>> GetAllActivitiesAsyncWithHttpInfo ()
        {

            var localVarPath = "/autocad.io/us-east/v2/Activities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllActivities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*List<Activity>*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(List<Activity>)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Activity>)));
            
        }

        /// <summary>
        /// Updates an Activity by specifying only the changed attributes. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="activity"></param>
        /// <returns></returns>
        public void PatchActivity (string id, ActivityOptional activity)
        {
             PatchActivityWithHttpInfo(id, activity);
        }

        /// <summary>
        /// Updates an Activity by specifying only the changed attributes. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="activity"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PatchActivityWithHttpInfo (string id, ActivityOptional activity)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->PatchActivity");
            // verify the required parameter 'activity' is set
            if (activity == null)
                throw new ApiException(400, "Missing required parameter 'activity' when calling ActivitiesApi->PatchActivity");

            var localVarPath = "/autocad.io/us-east/v2/Activities(&#39;{id}&#39;)";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (activity != null && activity.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = activity; // byte array
            }
            else if (   activity != null
                     && (   activity.GetType() == typeof(System.IO.FileStream)
                         || activity.GetType() == typeof(System.IO.BinaryReader)
                         || activity.GetType() == typeof(System.IO.BufferedStream)
                   	     || activity.GetType() == typeof(System.IO.MemoryStream)
                   	     || activity.GetType() == typeof(System.IO.StreamReader)
                   	    )
                    )
            {
                localVarPostBody =Configuration.ApiClient.toByteArray(activity); // byte array
            }
            else if ( activity != null )
            {
                localVarPostBody = Configuration.ApiClient.Serialize(activity);
            }

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates an Activity by specifying only the changed attributes. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="activity"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PatchActivityAsync (string id, ActivityOptional activity)
        {
             await PatchActivityAsyncWithHttpInfo(id, activity);

        }

        /// <summary>
        /// Updates an Activity by specifying only the changed attributes. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="activity"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PatchActivityAsyncWithHttpInfo (string id, ActivityOptional activity)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->PatchActivity");
            // verify the required parameter 'activity' is set
            if (activity == null)
                throw new ApiException(400, "Missing required parameter 'activity' when calling ActivitiesApi->PatchActivity");

            var localVarPath = "/autocad.io/us-east/v2/Activities(&#39;{id}&#39;)";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (activity != null && activity.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = activity; // byte array
            }
            else if (   activity != null
                     && (   activity.GetType() == typeof(System.IO.FileStream)
                         || activity.GetType() == typeof(System.IO.BinaryReader)
                         || activity.GetType() == typeof(System.IO.BufferedStream)
                   	     || activity.GetType() == typeof(System.IO.MemoryStream)
                   	     || activity.GetType() == typeof(System.IO.StreamReader)
                   	    )
                    )
            {
                localVarPostBody =Configuration.ApiClient.toByteArray(activity); // byte array
            }
            else if ( activity != null )
            {
                localVarPostBody = Configuration.ApiClient.Serialize(activity);
            }

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Sets the Activity to the specified version. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="activityVersion"></param>
        /// <returns></returns>
        public void SetActivityVersion (string id, ActivityVersion activityVersion)
        {
             SetActivityVersionWithHttpInfo(id, activityVersion);
        }

        /// <summary>
        /// Sets the Activity to the specified version. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="activityVersion"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetActivityVersionWithHttpInfo (string id, ActivityVersion activityVersion)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->SetActivityVersion");
            // verify the required parameter 'activityVersion' is set
            if (activityVersion == null)
                throw new ApiException(400, "Missing required parameter 'activityVersion' when calling ActivitiesApi->SetActivityVersion");

            var localVarPath = "/autocad.io/us-east/v2/Activities(&#39;{id}&#39;)/Operations.SetVersion";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (activityVersion != null && activityVersion.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = activityVersion; // byte array
            }
            else if (   activityVersion != null
                     && (   activityVersion.GetType() == typeof(System.IO.FileStream)
                         || activityVersion.GetType() == typeof(System.IO.BinaryReader)
                         || activityVersion.GetType() == typeof(System.IO.BufferedStream)
                   	     || activityVersion.GetType() == typeof(System.IO.MemoryStream)
                   	     || activityVersion.GetType() == typeof(System.IO.StreamReader)
                   	    )
                    )
            {
                localVarPostBody =Configuration.ApiClient.toByteArray(activityVersion); // byte array
            }
            else if ( activityVersion != null )
            {
                localVarPostBody = Configuration.ApiClient.Serialize(activityVersion);
            }

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetActivityVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Sets the Activity to the specified version. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="activityVersion"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetActivityVersionAsync (string id, ActivityVersion activityVersion)
        {
             await SetActivityVersionAsyncWithHttpInfo(id, activityVersion);

        }

        /// <summary>
        /// Sets the Activity to the specified version. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="activityVersion"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetActivityVersionAsyncWithHttpInfo (string id, ActivityVersion activityVersion)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->SetActivityVersion");
            // verify the required parameter 'activityVersion' is set
            if (activityVersion == null)
                throw new ApiException(400, "Missing required parameter 'activityVersion' when calling ActivitiesApi->SetActivityVersion");

            var localVarPath = "/autocad.io/us-east/v2/Activities(&#39;{id}&#39;)/Operations.SetVersion";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (activityVersion != null && activityVersion.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = activityVersion; // byte array
            }
            else if (   activityVersion != null
                     && (   activityVersion.GetType() == typeof(System.IO.FileStream)
                         || activityVersion.GetType() == typeof(System.IO.BinaryReader)
                         || activityVersion.GetType() == typeof(System.IO.BufferedStream)
                   	     || activityVersion.GetType() == typeof(System.IO.MemoryStream)
                   	     || activityVersion.GetType() == typeof(System.IO.StreamReader)
                   	    )
                    )
            {
                localVarPostBody =Configuration.ApiClient.toByteArray(activityVersion); // byte array
            }
            else if ( activityVersion != null )
            {
                localVarPostBody = Configuration.ApiClient.Serialize(activityVersion);
            }

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetActivityVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates an Activity by redefining the entire Activity object. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="activity"></param>
        /// <returns></returns>
        public void UpdateActivity (string id, Activity activity)
        {
             UpdateActivityWithHttpInfo(id, activity);
        }

        /// <summary>
        /// Updates an Activity by redefining the entire Activity object. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="activity"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateActivityWithHttpInfo (string id, Activity activity)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->UpdateActivity");
            // verify the required parameter 'activity' is set
            if (activity == null)
                throw new ApiException(400, "Missing required parameter 'activity' when calling ActivitiesApi->UpdateActivity");

            var localVarPath = "/autocad.io/us-east/v2/Activities(&#39;{id}&#39;)";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (activity != null && activity.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = activity; // byte array
            }
            else if (   activity != null
                     && (   activity.GetType() == typeof(System.IO.FileStream)
                         || activity.GetType() == typeof(System.IO.BinaryReader)
                         || activity.GetType() == typeof(System.IO.BufferedStream)
                   	     || activity.GetType() == typeof(System.IO.MemoryStream)
                   	     || activity.GetType() == typeof(System.IO.StreamReader)
                   	    )
                    )
            {
                localVarPostBody =Configuration.ApiClient.toByteArray(activity); // byte array
            }
            else if ( activity != null )
            {
                localVarPostBody = Configuration.ApiClient.Serialize(activity);
            }

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates an Activity by redefining the entire Activity object. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="activity"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateActivityAsync (string id, Activity activity)
        {
             await UpdateActivityAsyncWithHttpInfo(id, activity);

        }

        /// <summary>
        /// Updates an Activity by redefining the entire Activity object. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="activity"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateActivityAsyncWithHttpInfo (string id, Activity activity)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->UpdateActivity");
            // verify the required parameter 'activity' is set
            if (activity == null)
                throw new ApiException(400, "Missing required parameter 'activity' when calling ActivitiesApi->UpdateActivity");

            var localVarPath = "/autocad.io/us-east/v2/Activities(&#39;{id}&#39;)";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (activity != null && activity.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = activity; // byte array
            }
            else if (   activity != null
                     && (   activity.GetType() == typeof(System.IO.FileStream)
                         || activity.GetType() == typeof(System.IO.BinaryReader)
                         || activity.GetType() == typeof(System.IO.BufferedStream)
                   	     || activity.GetType() == typeof(System.IO.MemoryStream)
                   	     || activity.GetType() == typeof(System.IO.StreamReader)
                   	    )
                    )
            {
                localVarPostBody =Configuration.ApiClient.toByteArray(activity); // byte array
            }
            else if ( activity != null )
            {
                localVarPostBody = Configuration.ApiClient.Serialize(activity);
            }

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
