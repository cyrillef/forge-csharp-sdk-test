/* 
 * Forge SDK
 *
 * The Forge Platform contains an expanding collection of web service components that can be used with Autodesk cloud-based products or your own technologies. Take advantage of Autodesk’s expertise in design and engineering.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: forge.help@autodesk.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Newtonsoft.Json.Linq;
using Autodesk.Forge.Client;
using Autodesk.Forge.Model;
using Version=Autodesk.Forge.Model.Version;

namespace Autodesk.Forge
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Copies an object to another object name in the same bucket.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="newObjName">URL-encoded Object key to use as the destination</param>
        /// <returns>ObjectDetails</returns>
        /*ObjectDetails*/dynamic CopyTo (string bucketKey, string objectName, string newObjName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Copies an object to another object name in the same bucket.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="newObjName">URL-encoded Object key to use as the destination</param>
        /// <returns>ApiResponse of ObjectDetails</returns>
        ApiResponse</*ObjectDetails*/dynamic> CopyToWithHttpInfo (string bucketKey, string objectName, string newObjName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint creates a signed URL that can be used to download an object within the specified expiration time. Be aware that if the object the signed URL points to is deleted or expires before the signed URL expires, then the signed URL will no longer be valid. A successful call to this endpoint requires bucket owner access.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="postBucketsSigned">Body Structure</param>
        /// <param name="access">Access for signed resource Acceptable values: &#x60;read&#x60;, &#x60;write&#x60;, &#x60;readwrite&#x60;. Default value: &#x60;read&#x60;  (optional, default to read)</param>
        /// <returns>PostObjectSigned</returns>
        /*PostObjectSigned*/dynamic CreateSignedResource (string bucketKey, string objectName, PostBucketsSigned postBucketsSigned, string access = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint creates a signed URL that can be used to download an object within the specified expiration time. Be aware that if the object the signed URL points to is deleted or expires before the signed URL expires, then the signed URL will no longer be valid. A successful call to this endpoint requires bucket owner access.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="postBucketsSigned">Body Structure</param>
        /// <param name="access">Access for signed resource Acceptable values: &#x60;read&#x60;, &#x60;write&#x60;, &#x60;readwrite&#x60;. Default value: &#x60;read&#x60;  (optional, default to read)</param>
        /// <returns>ApiResponse of PostObjectSigned</returns>
        ApiResponse</*PostObjectSigned*/dynamic> CreateSignedResourceWithHttpInfo (string bucketKey, string objectName, PostBucketsSigned postBucketsSigned, string access = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes an object from the bucket.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <returns></returns>
        void DeleteObject (string bucketKey, string objectName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes an object from the bucket.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteObjectWithHttpInfo (string bucketKey, string objectName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a signed URL. A successful call to this endpoint requires bucket owner access.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of signed resource</param>
        /// <param name="region">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
        /// <returns></returns>
        void DeleteSignedResource (string id, string region = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a signed URL. A successful call to this endpoint requires bucket owner access.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of signed resource</param>
        /// <param name="region">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSignedResourceWithHttpInfo (string id, string region = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Download an object.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="range">A range of bytes to download from the specified object. (optional)</param>
        /// <param name="ifNoneMatch">The value of this header is compared to the ETAG of the object. If they match, the body will not be included in the response. Only the object information will be included. (optional)</param>
        /// <param name="ifModifiedSince">If the requested object has not been modified since the time specified in this field, an entity will not be returned from the server; instead, a 304 (not modified) response will be returned without any message body.  (optional)</param>
        /// <param name="acceptEncoding">When gzip is specified, a gzip compressed stream of the object’s bytes will be returned in the response. Cannot use “Accept-Encoding:gzip” with Range header containing an end byte range. End byte range will not be honored if “Accept-Encoding: gzip” header is used.  (optional)</param>
        /// <returns>System.IO.Stream</returns>
        /*System.IO.Stream*/dynamic GetObject (string bucketKey, string objectName, string range = null, string ifNoneMatch = null, DateTime? ifModifiedSince = null, string acceptEncoding = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Download an object.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="range">A range of bytes to download from the specified object. (optional)</param>
        /// <param name="ifNoneMatch">The value of this header is compared to the ETAG of the object. If they match, the body will not be included in the response. Only the object information will be included. (optional)</param>
        /// <param name="ifModifiedSince">If the requested object has not been modified since the time specified in this field, an entity will not be returned from the server; instead, a 304 (not modified) response will be returned without any message body.  (optional)</param>
        /// <param name="acceptEncoding">When gzip is specified, a gzip compressed stream of the object’s bytes will be returned in the response. Cannot use “Accept-Encoding:gzip” with Range header containing an end byte range. End byte range will not be honored if “Accept-Encoding: gzip” header is used.  (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse</*System.IO.Stream*/dynamic> GetObjectWithHttpInfo (string bucketKey, string objectName, string range = null, string ifNoneMatch = null, DateTime? ifModifiedSince = null, string acceptEncoding = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns object details in JSON format.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="ifModifiedSince">If the requested object has not been modified since the time specified in this field, an entity will not be returned from the server; instead, a 304 (not modified) response will be returned without any message body.  (optional)</param>
        /// <param name="with">Extra information in details; multiple uses are supported Acceptable values: &#x60;createdDate&#x60;, &#x60;lastAccessedDate&#x60;, &#x60;lastModifiedDate&#x60;  (optional)</param>
        /// <returns>ObjectFullDetails</returns>
        /*ObjectFullDetails*/dynamic GetObjectDetails (string bucketKey, string objectName, DateTime? ifModifiedSince = null, string with = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns object details in JSON format.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="ifModifiedSince">If the requested object has not been modified since the time specified in this field, an entity will not be returned from the server; instead, a 304 (not modified) response will be returned without any message body.  (optional)</param>
        /// <param name="with">Extra information in details; multiple uses are supported Acceptable values: &#x60;createdDate&#x60;, &#x60;lastAccessedDate&#x60;, &#x60;lastModifiedDate&#x60;  (optional)</param>
        /// <returns>ApiResponse of ObjectFullDetails</returns>
        ApiResponse</*ObjectFullDetails*/dynamic> GetObjectDetailsWithHttpInfo (string bucketKey, string objectName, DateTime? ifModifiedSince = null, string with = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List objects in a bucket. It is only available to the bucket creator.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="limit">Limit to the response size, Acceptable values: 1-100 Default &#x3D; 10  (optional, default to 10)</param>
        /// <param name="beginsWith">Provides a way to filter the based on object key name (optional)</param>
        /// <param name="startAt">Key to use as an offset to continue pagination This is typically the last bucket key found in a preceding GET buckets response  (optional)</param>
        /// <returns>BucketObjects</returns>
        /*BucketObjects*/dynamic GetObjects (string bucketKey, int? limit = null, string beginsWith = null, string startAt = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List objects in a bucket. It is only available to the bucket creator.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="limit">Limit to the response size, Acceptable values: 1-100 Default &#x3D; 10  (optional, default to 10)</param>
        /// <param name="beginsWith">Provides a way to filter the based on object key name (optional)</param>
        /// <param name="startAt">Key to use as an offset to continue pagination This is typically the last bucket key found in a preceding GET buckets response  (optional)</param>
        /// <returns>ApiResponse of BucketObjects</returns>
        ApiResponse</*BucketObjects*/dynamic> GetObjectsWithHttpInfo (string bucketKey, int? limit = null, string beginsWith = null, string startAt = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Download an object using a signed URL.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of signed resource</param>
        /// <param name="range">A range of bytes to download from the specified object. (optional)</param>
        /// <param name="ifNoneMatch">The value of this header is compared to the ETAG of the object. If they match, the body will not be included in the response. Only the object information will be included. (optional)</param>
        /// <param name="ifModifiedSince">If the requested object has not been modified since the time specified in this field, an entity will not be returned from the server; instead, a 304 (not modified) response will be returned without any message body.  (optional)</param>
        /// <param name="acceptEncoding">When gzip is specified, a gzip compressed stream of the object’s bytes will be returned in the response. Cannot use “Accept-Encoding:gzip” with Range header containing an end byte range. End byte range will not be honored if “Accept-Encoding: gzip” header is used.  (optional)</param>
        /// <param name="region">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
        /// <returns>System.IO.Stream</returns>
        /*System.IO.Stream*/dynamic GetSignedResource (string id, string range = null, string ifNoneMatch = null, DateTime? ifModifiedSince = null, string acceptEncoding = null, string region = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Download an object using a signed URL.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of signed resource</param>
        /// <param name="range">A range of bytes to download from the specified object. (optional)</param>
        /// <param name="ifNoneMatch">The value of this header is compared to the ETAG of the object. If they match, the body will not be included in the response. Only the object information will be included. (optional)</param>
        /// <param name="ifModifiedSince">If the requested object has not been modified since the time specified in this field, an entity will not be returned from the server; instead, a 304 (not modified) response will be returned without any message body.  (optional)</param>
        /// <param name="acceptEncoding">When gzip is specified, a gzip compressed stream of the object’s bytes will be returned in the response. Cannot use “Accept-Encoding:gzip” with Range header containing an end byte range. End byte range will not be honored if “Accept-Encoding: gzip” header is used.  (optional)</param>
        /// <param name="region">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse</*System.IO.Stream*/dynamic> GetSignedResourceWithHttpInfo (string id, string range = null, string ifNoneMatch = null, DateTime? ifModifiedSince = null, string acceptEncoding = null, string region = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint returns status information about a resumable upload.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="sessionId">Unique identifier of a session of a file being uploaded</param>
        /// <returns></returns>
        void GetStatusBySessionId (string bucketKey, string objectName, string sessionId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint returns status information about a resumable upload.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="sessionId">Unique identifier of a session of a file being uploaded</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetStatusBySessionIdWithHttpInfo (string bucketKey, string objectName, string sessionId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint allows resumable uploads for large files in chunks.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="contentLength">Indicates the size of the request body.</param>
        /// <param name="contentRange">Byte range of a segment being uploaded</param>
        /// <param name="sessionId">Unique identifier of a session of a file being uploaded</param>
        /// <param name="body"></param>
        /// <param name="contentDisposition">The suggested default filename when downloading this object to a file after it has been uploaded. (optional)</param>
        /// <param name="ifMatch">If-Match header containing a SHA-1 hash of the bytes in the request body can be sent by the calling service or client application with the request. If present, OSS will use the value of If-Match header to verify that a SHA-1 calculated for the uploaded bytes server side matches what was sent in the header. If not, the request is failed with a status 412 Precondition Failed and the data is not written.  (optional)</param>
        /// <returns>ObjectDetails</returns>
        /*ObjectDetails*/dynamic UploadChunk (string bucketKey, string objectName, int? contentLength, string contentRange, string sessionId, System.IO.Stream body, string contentDisposition = null, string ifMatch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint allows resumable uploads for large files in chunks.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="contentLength">Indicates the size of the request body.</param>
        /// <param name="contentRange">Byte range of a segment being uploaded</param>
        /// <param name="sessionId">Unique identifier of a session of a file being uploaded</param>
        /// <param name="body"></param>
        /// <param name="contentDisposition">The suggested default filename when downloading this object to a file after it has been uploaded. (optional)</param>
        /// <param name="ifMatch">If-Match header containing a SHA-1 hash of the bytes in the request body can be sent by the calling service or client application with the request. If present, OSS will use the value of If-Match header to verify that a SHA-1 calculated for the uploaded bytes server side matches what was sent in the header. If not, the request is failed with a status 412 Precondition Failed and the data is not written.  (optional)</param>
        /// <returns>ApiResponse of ObjectDetails</returns>
        ApiResponse</*ObjectDetails*/dynamic> UploadChunkWithHttpInfo (string bucketKey, string objectName, int? contentLength, string contentRange, string sessionId, System.IO.Stream body, string contentDisposition = null, string ifMatch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload an object. If the specified object name already exists in the bucket, the uploaded content will overwrite the existing content for the bucket name/object name combination. 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="contentLength">Indicates the size of the request body.</param>
        /// <param name="body"></param>
        /// <param name="contentDisposition">The suggested default filename when downloading this object to a file after it has been uploaded. (optional)</param>
        /// <param name="ifMatch">If-Match header containing a SHA-1 hash of the bytes in the request body can be sent by the calling service or client application with the request. If present, OSS will use the value of If-Match header to verify that a SHA-1 calculated for the uploaded bytes server side matches what was sent in the header. If not, the request is failed with a status 412 Precondition Failed and the data is not written.  (optional)</param>
        /// <returns>ObjectDetails</returns>
        /*ObjectDetails*/dynamic UploadObject (string bucketKey, string objectName, int? contentLength, System.IO.Stream body, string contentDisposition = null, string ifMatch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload an object. If the specified object name already exists in the bucket, the uploaded content will overwrite the existing content for the bucket name/object name combination. 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="contentLength">Indicates the size of the request body.</param>
        /// <param name="body"></param>
        /// <param name="contentDisposition">The suggested default filename when downloading this object to a file after it has been uploaded. (optional)</param>
        /// <param name="ifMatch">If-Match header containing a SHA-1 hash of the bytes in the request body can be sent by the calling service or client application with the request. If present, OSS will use the value of If-Match header to verify that a SHA-1 calculated for the uploaded bytes server side matches what was sent in the header. If not, the request is failed with a status 412 Precondition Failed and the data is not written.  (optional)</param>
        /// <returns>ApiResponse of ObjectDetails</returns>
        ApiResponse</*ObjectDetails*/dynamic> UploadObjectWithHttpInfo (string bucketKey, string objectName, int? contentLength, System.IO.Stream body, string contentDisposition = null, string ifMatch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Overwrite a existing object using a signed URL.  Conditions to call this operation:  Object is available Expiration period is valid Signed URL should be created with &#x60;write&#x60; or &#x60;readwrite&#x60; 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of signed resource</param>
        /// <param name="contentLength">Indicates the size of the request body.</param>
        /// <param name="body"></param>
        /// <param name="contentDisposition">The suggested default filename when downloading this object to a file after it has been uploaded. (optional)</param>
        /// <param name="xAdsRegion">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
        /// <param name="ifMatch">If-Match header containing a SHA-1 hash of the bytes in the request body can be sent by the calling service or client application with the request. If present, OSS will use the value of If-Match header to verify that a SHA-1 calculated for the uploaded bytes server side matches what was sent in the header. If not, the request is failed with a status 412 Precondition Failed and the data is not written.  (optional)</param>
        /// <returns>ObjectDetails</returns>
        /*ObjectDetails*/dynamic UploadSignedResource (string id, int? contentLength, System.IO.Stream body, string contentDisposition = null, string xAdsRegion = null, string ifMatch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Overwrite a existing object using a signed URL.  Conditions to call this operation:  Object is available Expiration period is valid Signed URL should be created with &#x60;write&#x60; or &#x60;readwrite&#x60; 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of signed resource</param>
        /// <param name="contentLength">Indicates the size of the request body.</param>
        /// <param name="body"></param>
        /// <param name="contentDisposition">The suggested default filename when downloading this object to a file after it has been uploaded. (optional)</param>
        /// <param name="xAdsRegion">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
        /// <param name="ifMatch">If-Match header containing a SHA-1 hash of the bytes in the request body can be sent by the calling service or client application with the request. If present, OSS will use the value of If-Match header to verify that a SHA-1 calculated for the uploaded bytes server side matches what was sent in the header. If not, the request is failed with a status 412 Precondition Failed and the data is not written.  (optional)</param>
        /// <returns>ApiResponse of ObjectDetails</returns>
        ApiResponse</*ObjectDetails*/dynamic> UploadSignedResourceWithHttpInfo (string id, int? contentLength, System.IO.Stream body, string contentDisposition = null, string xAdsRegion = null, string ifMatch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Resumable upload for signed URLs.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of signed resource</param>
        /// <param name="contentRange">Byte range of a segment being uploaded</param>
        /// <param name="sessionId">Unique identifier of a session of a file being uploaded</param>
        /// <param name="body"></param>
        /// <param name="contentDisposition">The suggested default filename when downloading this object to a file after it has been uploaded. (optional)</param>
        /// <param name="xAdsRegion">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
        /// <returns>ObjectDetails</returns>
        /*ObjectDetails*/dynamic UploadSignedResourcesChunk (string id, string contentRange, string sessionId, System.IO.Stream body, string contentDisposition = null, string xAdsRegion = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Resumable upload for signed URLs.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of signed resource</param>
        /// <param name="contentRange">Byte range of a segment being uploaded</param>
        /// <param name="sessionId">Unique identifier of a session of a file being uploaded</param>
        /// <param name="body"></param>
        /// <param name="contentDisposition">The suggested default filename when downloading this object to a file after it has been uploaded. (optional)</param>
        /// <param name="xAdsRegion">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
        /// <returns>ApiResponse of ObjectDetails</returns>
        ApiResponse</*ObjectDetails*/dynamic> UploadSignedResourcesChunkWithHttpInfo (string id, string contentRange, string sessionId, System.IO.Stream body, string contentDisposition = null, string xAdsRegion = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Copies an object to another object name in the same bucket.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="newObjName">URL-encoded Object key to use as the destination</param>
        /// <returns>Task of ObjectDetails</returns>
        System.Threading.Tasks.Task</*ObjectDetails*/dynamic> CopyToAsync (string bucketKey, string objectName, string newObjName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Copies an object to another object name in the same bucket.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="newObjName">URL-encoded Object key to use as the destination</param>
        /// <returns>Task of ApiResponse (ObjectDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse</*ObjectDetails*/dynamic>> CopyToAsyncWithHttpInfo (string bucketKey, string objectName, string newObjName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint creates a signed URL that can be used to download an object within the specified expiration time. Be aware that if the object the signed URL points to is deleted or expires before the signed URL expires, then the signed URL will no longer be valid. A successful call to this endpoint requires bucket owner access.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="postBucketsSigned">Body Structure</param>
        /// <param name="access">Access for signed resource Acceptable values: &#x60;read&#x60;, &#x60;write&#x60;, &#x60;readwrite&#x60;. Default value: &#x60;read&#x60;  (optional, default to read)</param>
        /// <returns>Task of PostObjectSigned</returns>
        System.Threading.Tasks.Task</*PostObjectSigned*/dynamic> CreateSignedResourceAsync (string bucketKey, string objectName, PostBucketsSigned postBucketsSigned, string access = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint creates a signed URL that can be used to download an object within the specified expiration time. Be aware that if the object the signed URL points to is deleted or expires before the signed URL expires, then the signed URL will no longer be valid. A successful call to this endpoint requires bucket owner access.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="postBucketsSigned">Body Structure</param>
        /// <param name="access">Access for signed resource Acceptable values: &#x60;read&#x60;, &#x60;write&#x60;, &#x60;readwrite&#x60;. Default value: &#x60;read&#x60;  (optional, default to read)</param>
        /// <returns>Task of ApiResponse (PostObjectSigned)</returns>
        System.Threading.Tasks.Task<ApiResponse</*PostObjectSigned*/dynamic>> CreateSignedResourceAsyncWithHttpInfo (string bucketKey, string objectName, PostBucketsSigned postBucketsSigned, string access = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes an object from the bucket.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteObjectAsync (string bucketKey, string objectName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes an object from the bucket.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteObjectAsyncWithHttpInfo (string bucketKey, string objectName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a signed URL. A successful call to this endpoint requires bucket owner access.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of signed resource</param>
        /// <param name="region">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSignedResourceAsync (string id, string region = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a signed URL. A successful call to this endpoint requires bucket owner access.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of signed resource</param>
        /// <param name="region">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSignedResourceAsyncWithHttpInfo (string id, string region = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Download an object.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="range">A range of bytes to download from the specified object. (optional)</param>
        /// <param name="ifNoneMatch">The value of this header is compared to the ETAG of the object. If they match, the body will not be included in the response. Only the object information will be included. (optional)</param>
        /// <param name="ifModifiedSince">If the requested object has not been modified since the time specified in this field, an entity will not be returned from the server; instead, a 304 (not modified) response will be returned without any message body.  (optional)</param>
        /// <param name="acceptEncoding">When gzip is specified, a gzip compressed stream of the object’s bytes will be returned in the response. Cannot use “Accept-Encoding:gzip” with Range header containing an end byte range. End byte range will not be honored if “Accept-Encoding: gzip” header is used.  (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task</*System.IO.Stream*/dynamic> GetObjectAsync (string bucketKey, string objectName, string range = null, string ifNoneMatch = null, DateTime? ifModifiedSince = null, string acceptEncoding = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Download an object.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="range">A range of bytes to download from the specified object. (optional)</param>
        /// <param name="ifNoneMatch">The value of this header is compared to the ETAG of the object. If they match, the body will not be included in the response. Only the object information will be included. (optional)</param>
        /// <param name="ifModifiedSince">If the requested object has not been modified since the time specified in this field, an entity will not be returned from the server; instead, a 304 (not modified) response will be returned without any message body.  (optional)</param>
        /// <param name="acceptEncoding">When gzip is specified, a gzip compressed stream of the object’s bytes will be returned in the response. Cannot use “Accept-Encoding:gzip” with Range header containing an end byte range. End byte range will not be honored if “Accept-Encoding: gzip” header is used.  (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse</*System.IO.Stream*/dynamic>> GetObjectAsyncWithHttpInfo (string bucketKey, string objectName, string range = null, string ifNoneMatch = null, DateTime? ifModifiedSince = null, string acceptEncoding = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns object details in JSON format.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="ifModifiedSince">If the requested object has not been modified since the time specified in this field, an entity will not be returned from the server; instead, a 304 (not modified) response will be returned without any message body.  (optional)</param>
        /// <param name="with">Extra information in details; multiple uses are supported Acceptable values: &#x60;createdDate&#x60;, &#x60;lastAccessedDate&#x60;, &#x60;lastModifiedDate&#x60;  (optional)</param>
        /// <returns>Task of ObjectFullDetails</returns>
        System.Threading.Tasks.Task</*ObjectFullDetails*/dynamic> GetObjectDetailsAsync (string bucketKey, string objectName, DateTime? ifModifiedSince = null, string with = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns object details in JSON format.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="ifModifiedSince">If the requested object has not been modified since the time specified in this field, an entity will not be returned from the server; instead, a 304 (not modified) response will be returned without any message body.  (optional)</param>
        /// <param name="with">Extra information in details; multiple uses are supported Acceptable values: &#x60;createdDate&#x60;, &#x60;lastAccessedDate&#x60;, &#x60;lastModifiedDate&#x60;  (optional)</param>
        /// <returns>Task of ApiResponse (ObjectFullDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse</*ObjectFullDetails*/dynamic>> GetObjectDetailsAsyncWithHttpInfo (string bucketKey, string objectName, DateTime? ifModifiedSince = null, string with = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List objects in a bucket. It is only available to the bucket creator.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="limit">Limit to the response size, Acceptable values: 1-100 Default &#x3D; 10  (optional, default to 10)</param>
        /// <param name="beginsWith">Provides a way to filter the based on object key name (optional)</param>
        /// <param name="startAt">Key to use as an offset to continue pagination This is typically the last bucket key found in a preceding GET buckets response  (optional)</param>
        /// <returns>Task of BucketObjects</returns>
        System.Threading.Tasks.Task</*BucketObjects*/dynamic> GetObjectsAsync (string bucketKey, int? limit = null, string beginsWith = null, string startAt = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List objects in a bucket. It is only available to the bucket creator.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="limit">Limit to the response size, Acceptable values: 1-100 Default &#x3D; 10  (optional, default to 10)</param>
        /// <param name="beginsWith">Provides a way to filter the based on object key name (optional)</param>
        /// <param name="startAt">Key to use as an offset to continue pagination This is typically the last bucket key found in a preceding GET buckets response  (optional)</param>
        /// <returns>Task of ApiResponse (BucketObjects)</returns>
        System.Threading.Tasks.Task<ApiResponse</*BucketObjects*/dynamic>> GetObjectsAsyncWithHttpInfo (string bucketKey, int? limit = null, string beginsWith = null, string startAt = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Download an object using a signed URL.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of signed resource</param>
        /// <param name="range">A range of bytes to download from the specified object. (optional)</param>
        /// <param name="ifNoneMatch">The value of this header is compared to the ETAG of the object. If they match, the body will not be included in the response. Only the object information will be included. (optional)</param>
        /// <param name="ifModifiedSince">If the requested object has not been modified since the time specified in this field, an entity will not be returned from the server; instead, a 304 (not modified) response will be returned without any message body.  (optional)</param>
        /// <param name="acceptEncoding">When gzip is specified, a gzip compressed stream of the object’s bytes will be returned in the response. Cannot use “Accept-Encoding:gzip” with Range header containing an end byte range. End byte range will not be honored if “Accept-Encoding: gzip” header is used.  (optional)</param>
        /// <param name="region">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task</*System.IO.Stream*/dynamic> GetSignedResourceAsync (string id, string range = null, string ifNoneMatch = null, DateTime? ifModifiedSince = null, string acceptEncoding = null, string region = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Download an object using a signed URL.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of signed resource</param>
        /// <param name="range">A range of bytes to download from the specified object. (optional)</param>
        /// <param name="ifNoneMatch">The value of this header is compared to the ETAG of the object. If they match, the body will not be included in the response. Only the object information will be included. (optional)</param>
        /// <param name="ifModifiedSince">If the requested object has not been modified since the time specified in this field, an entity will not be returned from the server; instead, a 304 (not modified) response will be returned without any message body.  (optional)</param>
        /// <param name="acceptEncoding">When gzip is specified, a gzip compressed stream of the object’s bytes will be returned in the response. Cannot use “Accept-Encoding:gzip” with Range header containing an end byte range. End byte range will not be honored if “Accept-Encoding: gzip” header is used.  (optional)</param>
        /// <param name="region">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse</*System.IO.Stream*/dynamic>> GetSignedResourceAsyncWithHttpInfo (string id, string range = null, string ifNoneMatch = null, DateTime? ifModifiedSince = null, string acceptEncoding = null, string region = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint returns status information about a resumable upload.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="sessionId">Unique identifier of a session of a file being uploaded</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetStatusBySessionIdAsync (string bucketKey, string objectName, string sessionId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint returns status information about a resumable upload.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="sessionId">Unique identifier of a session of a file being uploaded</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetStatusBySessionIdAsyncWithHttpInfo (string bucketKey, string objectName, string sessionId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint allows resumable uploads for large files in chunks.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="contentLength">Indicates the size of the request body.</param>
        /// <param name="contentRange">Byte range of a segment being uploaded</param>
        /// <param name="sessionId">Unique identifier of a session of a file being uploaded</param>
        /// <param name="body"></param>
        /// <param name="contentDisposition">The suggested default filename when downloading this object to a file after it has been uploaded. (optional)</param>
        /// <param name="ifMatch">If-Match header containing a SHA-1 hash of the bytes in the request body can be sent by the calling service or client application with the request. If present, OSS will use the value of If-Match header to verify that a SHA-1 calculated for the uploaded bytes server side matches what was sent in the header. If not, the request is failed with a status 412 Precondition Failed and the data is not written.  (optional)</param>
        /// <returns>Task of ObjectDetails</returns>
        System.Threading.Tasks.Task</*ObjectDetails*/dynamic> UploadChunkAsync (string bucketKey, string objectName, int? contentLength, string contentRange, string sessionId, System.IO.Stream body, string contentDisposition = null, string ifMatch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint allows resumable uploads for large files in chunks.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="contentLength">Indicates the size of the request body.</param>
        /// <param name="contentRange">Byte range of a segment being uploaded</param>
        /// <param name="sessionId">Unique identifier of a session of a file being uploaded</param>
        /// <param name="body"></param>
        /// <param name="contentDisposition">The suggested default filename when downloading this object to a file after it has been uploaded. (optional)</param>
        /// <param name="ifMatch">If-Match header containing a SHA-1 hash of the bytes in the request body can be sent by the calling service or client application with the request. If present, OSS will use the value of If-Match header to verify that a SHA-1 calculated for the uploaded bytes server side matches what was sent in the header. If not, the request is failed with a status 412 Precondition Failed and the data is not written.  (optional)</param>
        /// <returns>Task of ApiResponse (ObjectDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse</*ObjectDetails*/dynamic>> UploadChunkAsyncWithHttpInfo (string bucketKey, string objectName, int? contentLength, string contentRange, string sessionId, System.IO.Stream body, string contentDisposition = null, string ifMatch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload an object. If the specified object name already exists in the bucket, the uploaded content will overwrite the existing content for the bucket name/object name combination. 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="contentLength">Indicates the size of the request body.</param>
        /// <param name="body"></param>
        /// <param name="contentDisposition">The suggested default filename when downloading this object to a file after it has been uploaded. (optional)</param>
        /// <param name="ifMatch">If-Match header containing a SHA-1 hash of the bytes in the request body can be sent by the calling service or client application with the request. If present, OSS will use the value of If-Match header to verify that a SHA-1 calculated for the uploaded bytes server side matches what was sent in the header. If not, the request is failed with a status 412 Precondition Failed and the data is not written.  (optional)</param>
        /// <returns>Task of ObjectDetails</returns>
        System.Threading.Tasks.Task</*ObjectDetails*/dynamic> UploadObjectAsync (string bucketKey, string objectName, int? contentLength, System.IO.Stream body, string contentDisposition = null, string ifMatch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload an object. If the specified object name already exists in the bucket, the uploaded content will overwrite the existing content for the bucket name/object name combination. 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="contentLength">Indicates the size of the request body.</param>
        /// <param name="body"></param>
        /// <param name="contentDisposition">The suggested default filename when downloading this object to a file after it has been uploaded. (optional)</param>
        /// <param name="ifMatch">If-Match header containing a SHA-1 hash of the bytes in the request body can be sent by the calling service or client application with the request. If present, OSS will use the value of If-Match header to verify that a SHA-1 calculated for the uploaded bytes server side matches what was sent in the header. If not, the request is failed with a status 412 Precondition Failed and the data is not written.  (optional)</param>
        /// <returns>Task of ApiResponse (ObjectDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse</*ObjectDetails*/dynamic>> UploadObjectAsyncWithHttpInfo (string bucketKey, string objectName, int? contentLength, System.IO.Stream body, string contentDisposition = null, string ifMatch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Overwrite a existing object using a signed URL.  Conditions to call this operation:  Object is available Expiration period is valid Signed URL should be created with &#x60;write&#x60; or &#x60;readwrite&#x60; 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of signed resource</param>
        /// <param name="contentLength">Indicates the size of the request body.</param>
        /// <param name="body"></param>
        /// <param name="contentDisposition">The suggested default filename when downloading this object to a file after it has been uploaded. (optional)</param>
        /// <param name="xAdsRegion">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
        /// <param name="ifMatch">If-Match header containing a SHA-1 hash of the bytes in the request body can be sent by the calling service or client application with the request. If present, OSS will use the value of If-Match header to verify that a SHA-1 calculated for the uploaded bytes server side matches what was sent in the header. If not, the request is failed with a status 412 Precondition Failed and the data is not written.  (optional)</param>
        /// <returns>Task of ObjectDetails</returns>
        System.Threading.Tasks.Task</*ObjectDetails*/dynamic> UploadSignedResourceAsync (string id, int? contentLength, System.IO.Stream body, string contentDisposition = null, string xAdsRegion = null, string ifMatch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Overwrite a existing object using a signed URL.  Conditions to call this operation:  Object is available Expiration period is valid Signed URL should be created with &#x60;write&#x60; or &#x60;readwrite&#x60; 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of signed resource</param>
        /// <param name="contentLength">Indicates the size of the request body.</param>
        /// <param name="body"></param>
        /// <param name="contentDisposition">The suggested default filename when downloading this object to a file after it has been uploaded. (optional)</param>
        /// <param name="xAdsRegion">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
        /// <param name="ifMatch">If-Match header containing a SHA-1 hash of the bytes in the request body can be sent by the calling service or client application with the request. If present, OSS will use the value of If-Match header to verify that a SHA-1 calculated for the uploaded bytes server side matches what was sent in the header. If not, the request is failed with a status 412 Precondition Failed and the data is not written.  (optional)</param>
        /// <returns>Task of ApiResponse (ObjectDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse</*ObjectDetails*/dynamic>> UploadSignedResourceAsyncWithHttpInfo (string id, int? contentLength, System.IO.Stream body, string contentDisposition = null, string xAdsRegion = null, string ifMatch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Resumable upload for signed URLs.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of signed resource</param>
        /// <param name="contentRange">Byte range of a segment being uploaded</param>
        /// <param name="sessionId">Unique identifier of a session of a file being uploaded</param>
        /// <param name="body"></param>
        /// <param name="contentDisposition">The suggested default filename when downloading this object to a file after it has been uploaded. (optional)</param>
        /// <param name="xAdsRegion">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
        /// <returns>Task of ObjectDetails</returns>
        System.Threading.Tasks.Task</*ObjectDetails*/dynamic> UploadSignedResourcesChunkAsync (string id, string contentRange, string sessionId, System.IO.Stream body, string contentDisposition = null, string xAdsRegion = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Resumable upload for signed URLs.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of signed resource</param>
        /// <param name="contentRange">Byte range of a segment being uploaded</param>
        /// <param name="sessionId">Unique identifier of a session of a file being uploaded</param>
        /// <param name="body"></param>
        /// <param name="contentDisposition">The suggested default filename when downloading this object to a file after it has been uploaded. (optional)</param>
        /// <param name="xAdsRegion">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
        /// <returns>Task of ApiResponse (ObjectDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse</*ObjectDetails*/dynamic>> UploadSignedResourcesChunkAsyncWithHttpInfo (string id, string contentRange, string sessionId, System.IO.Stream body, string contentDisposition = null, string xAdsRegion = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObjectsApi : IObjectsApi
    {
        private Autodesk.Forge.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Autodesk.Forge.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObjectsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Autodesk.Forge.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Autodesk.Forge.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Copies an object to another object name in the same bucket.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="newObjName">URL-encoded Object key to use as the destination</param>
        /// <returns>ObjectDetails</returns>
        public /*ObjectDetails*/dynamic CopyTo (string bucketKey, string objectName, string newObjName)
        {
             ApiResponse</*ObjectDetails*/dynamic> localVarResponse = CopyToWithHttpInfo(bucketKey, objectName, newObjName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Copies an object to another object name in the same bucket.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="newObjName">URL-encoded Object key to use as the destination</param>
        /// <returns>ApiResponse of ObjectDetails</returns>
        public ApiResponse< /*ObjectDetails*/dynamic > CopyToWithHttpInfo (string bucketKey, string objectName, string newObjName)
        {
            // verify the required parameter 'bucketKey' is set
            if (bucketKey == null)
                throw new ApiException(400, "Missing required parameter 'bucketKey' when calling ObjectsApi->CopyTo");
            // verify the required parameter 'objectName' is set
            if (objectName == null)
                throw new ApiException(400, "Missing required parameter 'objectName' when calling ObjectsApi->CopyTo");
            // verify the required parameter 'newObjName' is set
            if (newObjName == null)
                throw new ApiException(400, "Missing required parameter 'newObjName' when calling ObjectsApi->CopyTo");

            var localVarPath = "/oss/v2/buckets/{bucketKey}/objects/{objectName}/copyto/{newObjName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bucketKey != null) localVarPathParams.Add("bucketKey", Configuration.ApiClient.ParameterToString(bucketKey)); // path parameter
            if (objectName != null) localVarPathParams.Add("objectName", Configuration.ApiClient.ParameterToString(objectName)); // path parameter
            if (newObjName != null) localVarPathParams.Add("newObjName", Configuration.ApiClient.ParameterToString(newObjName)); // path parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CopyTo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*ObjectDetails*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(ObjectDetails)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(ObjectDetails)));
            
        }

        /// <summary>
        ///  Copies an object to another object name in the same bucket.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="newObjName">URL-encoded Object key to use as the destination</param>
        /// <returns>Task of ObjectDetails</returns>
        public async System.Threading.Tasks.Task</*ObjectDetails*/dynamic> CopyToAsync (string bucketKey, string objectName, string newObjName)
        {
             ApiResponse</*ObjectDetails*/dynamic> localVarResponse = await CopyToAsyncWithHttpInfo(bucketKey, objectName, newObjName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Copies an object to another object name in the same bucket.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="newObjName">URL-encoded Object key to use as the destination</param>
        /// <returns>Task of ApiResponse (ObjectDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*ObjectDetails*/dynamic>> CopyToAsyncWithHttpInfo (string bucketKey, string objectName, string newObjName)
        {
            // verify the required parameter 'bucketKey' is set
            if (bucketKey == null)
                throw new ApiException(400, "Missing required parameter 'bucketKey' when calling ObjectsApi->CopyTo");
            // verify the required parameter 'objectName' is set
            if (objectName == null)
                throw new ApiException(400, "Missing required parameter 'objectName' when calling ObjectsApi->CopyTo");
            // verify the required parameter 'newObjName' is set
            if (newObjName == null)
                throw new ApiException(400, "Missing required parameter 'newObjName' when calling ObjectsApi->CopyTo");

            var localVarPath = "/oss/v2/buckets/{bucketKey}/objects/{objectName}/copyto/{newObjName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bucketKey != null) localVarPathParams.Add("bucketKey", Configuration.ApiClient.ParameterToString(bucketKey)); // path parameter
            if (objectName != null) localVarPathParams.Add("objectName", Configuration.ApiClient.ParameterToString(objectName)); // path parameter
            if (newObjName != null) localVarPathParams.Add("newObjName", Configuration.ApiClient.ParameterToString(newObjName)); // path parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CopyTo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*ObjectDetails*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(ObjectDetails)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(ObjectDetails)));
            
        }

        /// <summary>
        ///  This endpoint creates a signed URL that can be used to download an object within the specified expiration time. Be aware that if the object the signed URL points to is deleted or expires before the signed URL expires, then the signed URL will no longer be valid. A successful call to this endpoint requires bucket owner access.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="postBucketsSigned">Body Structure</param>
        /// <param name="access">Access for signed resource Acceptable values: &#x60;read&#x60;, &#x60;write&#x60;, &#x60;readwrite&#x60;. Default value: &#x60;read&#x60;  (optional, default to read)</param>
        /// <returns>PostObjectSigned</returns>
        public /*PostObjectSigned*/dynamic CreateSignedResource (string bucketKey, string objectName, PostBucketsSigned postBucketsSigned, string access = null)
        {
             ApiResponse</*PostObjectSigned*/dynamic> localVarResponse = CreateSignedResourceWithHttpInfo(bucketKey, objectName, postBucketsSigned, access);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This endpoint creates a signed URL that can be used to download an object within the specified expiration time. Be aware that if the object the signed URL points to is deleted or expires before the signed URL expires, then the signed URL will no longer be valid. A successful call to this endpoint requires bucket owner access.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="postBucketsSigned">Body Structure</param>
        /// <param name="access">Access for signed resource Acceptable values: &#x60;read&#x60;, &#x60;write&#x60;, &#x60;readwrite&#x60;. Default value: &#x60;read&#x60;  (optional, default to read)</param>
        /// <returns>ApiResponse of PostObjectSigned</returns>
        public ApiResponse< /*PostObjectSigned*/dynamic > CreateSignedResourceWithHttpInfo (string bucketKey, string objectName, PostBucketsSigned postBucketsSigned, string access = null)
        {
            // verify the required parameter 'bucketKey' is set
            if (bucketKey == null)
                throw new ApiException(400, "Missing required parameter 'bucketKey' when calling ObjectsApi->CreateSignedResource");
            // verify the required parameter 'objectName' is set
            if (objectName == null)
                throw new ApiException(400, "Missing required parameter 'objectName' when calling ObjectsApi->CreateSignedResource");
            // verify the required parameter 'postBucketsSigned' is set
            if (postBucketsSigned == null)
                throw new ApiException(400, "Missing required parameter 'postBucketsSigned' when calling ObjectsApi->CreateSignedResource");

            var localVarPath = "/oss/v2/buckets/{bucketKey}/objects/{objectName}/signed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bucketKey != null) localVarPathParams.Add("bucketKey", Configuration.ApiClient.ParameterToString(bucketKey)); // path parameter
            if (objectName != null) localVarPathParams.Add("objectName", Configuration.ApiClient.ParameterToString(objectName)); // path parameter
            if (access != null) localVarQueryParams.Add("access", Configuration.ApiClient.ParameterToString(access)); // query parameter
            if (postBucketsSigned != null && postBucketsSigned.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = postBucketsSigned; // byte array
            }
            else if (   postBucketsSigned != null
                     && (   postBucketsSigned.GetType() == typeof(System.IO.FileStream)
                         || postBucketsSigned.GetType() == typeof(System.IO.BinaryReader)
                         || postBucketsSigned.GetType() == typeof(System.IO.BufferedStream)
                   	     || postBucketsSigned.GetType() == typeof(System.IO.MemoryStream)
                   	     || postBucketsSigned.GetType() == typeof(System.IO.StreamReader)
                   	    )
                    )
            {
                localVarPostBody =Configuration.ApiClient.toByteArray(postBucketsSigned); // byte array
            }
            else if ( postBucketsSigned != null )
            {
                localVarPostBody = Configuration.ApiClient.Serialize(postBucketsSigned);
            }

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSignedResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*PostObjectSigned*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(PostObjectSigned)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostObjectSigned)));
            
        }

        /// <summary>
        ///  This endpoint creates a signed URL that can be used to download an object within the specified expiration time. Be aware that if the object the signed URL points to is deleted or expires before the signed URL expires, then the signed URL will no longer be valid. A successful call to this endpoint requires bucket owner access.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="postBucketsSigned">Body Structure</param>
        /// <param name="access">Access for signed resource Acceptable values: &#x60;read&#x60;, &#x60;write&#x60;, &#x60;readwrite&#x60;. Default value: &#x60;read&#x60;  (optional, default to read)</param>
        /// <returns>Task of PostObjectSigned</returns>
        public async System.Threading.Tasks.Task</*PostObjectSigned*/dynamic> CreateSignedResourceAsync (string bucketKey, string objectName, PostBucketsSigned postBucketsSigned, string access = null)
        {
             ApiResponse</*PostObjectSigned*/dynamic> localVarResponse = await CreateSignedResourceAsyncWithHttpInfo(bucketKey, objectName, postBucketsSigned, access);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This endpoint creates a signed URL that can be used to download an object within the specified expiration time. Be aware that if the object the signed URL points to is deleted or expires before the signed URL expires, then the signed URL will no longer be valid. A successful call to this endpoint requires bucket owner access.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="postBucketsSigned">Body Structure</param>
        /// <param name="access">Access for signed resource Acceptable values: &#x60;read&#x60;, &#x60;write&#x60;, &#x60;readwrite&#x60;. Default value: &#x60;read&#x60;  (optional, default to read)</param>
        /// <returns>Task of ApiResponse (PostObjectSigned)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*PostObjectSigned*/dynamic>> CreateSignedResourceAsyncWithHttpInfo (string bucketKey, string objectName, PostBucketsSigned postBucketsSigned, string access = null)
        {
            // verify the required parameter 'bucketKey' is set
            if (bucketKey == null)
                throw new ApiException(400, "Missing required parameter 'bucketKey' when calling ObjectsApi->CreateSignedResource");
            // verify the required parameter 'objectName' is set
            if (objectName == null)
                throw new ApiException(400, "Missing required parameter 'objectName' when calling ObjectsApi->CreateSignedResource");
            // verify the required parameter 'postBucketsSigned' is set
            if (postBucketsSigned == null)
                throw new ApiException(400, "Missing required parameter 'postBucketsSigned' when calling ObjectsApi->CreateSignedResource");

            var localVarPath = "/oss/v2/buckets/{bucketKey}/objects/{objectName}/signed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bucketKey != null) localVarPathParams.Add("bucketKey", Configuration.ApiClient.ParameterToString(bucketKey)); // path parameter
            if (objectName != null) localVarPathParams.Add("objectName", Configuration.ApiClient.ParameterToString(objectName)); // path parameter
            if (access != null) localVarQueryParams.Add("access", Configuration.ApiClient.ParameterToString(access)); // query parameter
            if (postBucketsSigned != null && postBucketsSigned.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = postBucketsSigned; // byte array
            }
            else if (   postBucketsSigned != null
                     && (   postBucketsSigned.GetType() == typeof(System.IO.FileStream)
                         || postBucketsSigned.GetType() == typeof(System.IO.BinaryReader)
                         || postBucketsSigned.GetType() == typeof(System.IO.BufferedStream)
                   	     || postBucketsSigned.GetType() == typeof(System.IO.MemoryStream)
                   	     || postBucketsSigned.GetType() == typeof(System.IO.StreamReader)
                   	    )
                    )
            {
                localVarPostBody =Configuration.ApiClient.toByteArray(postBucketsSigned); // byte array
            }
            else if ( postBucketsSigned != null )
            {
                localVarPostBody = Configuration.ApiClient.Serialize(postBucketsSigned);
            }

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSignedResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*PostObjectSigned*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(PostObjectSigned)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostObjectSigned)));
            
        }

        /// <summary>
        ///  Deletes an object from the bucket.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <returns></returns>
        public void DeleteObject (string bucketKey, string objectName)
        {
             DeleteObjectWithHttpInfo(bucketKey, objectName);
        }

        /// <summary>
        ///  Deletes an object from the bucket.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteObjectWithHttpInfo (string bucketKey, string objectName)
        {
            // verify the required parameter 'bucketKey' is set
            if (bucketKey == null)
                throw new ApiException(400, "Missing required parameter 'bucketKey' when calling ObjectsApi->DeleteObject");
            // verify the required parameter 'objectName' is set
            if (objectName == null)
                throw new ApiException(400, "Missing required parameter 'objectName' when calling ObjectsApi->DeleteObject");

            var localVarPath = "/oss/v2/buckets/{bucketKey}/objects/{objectName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bucketKey != null) localVarPathParams.Add("bucketKey", Configuration.ApiClient.ParameterToString(bucketKey)); // path parameter
            if (objectName != null) localVarPathParams.Add("objectName", Configuration.ApiClient.ParameterToString(objectName)); // path parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteObject", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Deletes an object from the bucket.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteObjectAsync (string bucketKey, string objectName)
        {
             await DeleteObjectAsyncWithHttpInfo(bucketKey, objectName);

        }

        /// <summary>
        ///  Deletes an object from the bucket.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteObjectAsyncWithHttpInfo (string bucketKey, string objectName)
        {
            // verify the required parameter 'bucketKey' is set
            if (bucketKey == null)
                throw new ApiException(400, "Missing required parameter 'bucketKey' when calling ObjectsApi->DeleteObject");
            // verify the required parameter 'objectName' is set
            if (objectName == null)
                throw new ApiException(400, "Missing required parameter 'objectName' when calling ObjectsApi->DeleteObject");

            var localVarPath = "/oss/v2/buckets/{bucketKey}/objects/{objectName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bucketKey != null) localVarPathParams.Add("bucketKey", Configuration.ApiClient.ParameterToString(bucketKey)); // path parameter
            if (objectName != null) localVarPathParams.Add("objectName", Configuration.ApiClient.ParameterToString(objectName)); // path parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteObject", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Delete a signed URL. A successful call to this endpoint requires bucket owner access.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of signed resource</param>
        /// <param name="region">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
        /// <returns></returns>
        public void DeleteSignedResource (string id, string region = null)
        {
             DeleteSignedResourceWithHttpInfo(id, region);
        }

        /// <summary>
        ///  Delete a signed URL. A successful call to this endpoint requires bucket owner access.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of signed resource</param>
        /// <param name="region">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteSignedResourceWithHttpInfo (string id, string region = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ObjectsApi->DeleteSignedResource");

            var localVarPath = "/oss/v2/signedresources/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (region != null) localVarQueryParams.Add("region", Configuration.ApiClient.ParameterToString(region)); // query parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSignedResource", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Delete a signed URL. A successful call to this endpoint requires bucket owner access.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of signed resource</param>
        /// <param name="region">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSignedResourceAsync (string id, string region = null)
        {
             await DeleteSignedResourceAsyncWithHttpInfo(id, region);

        }

        /// <summary>
        ///  Delete a signed URL. A successful call to this endpoint requires bucket owner access.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of signed resource</param>
        /// <param name="region">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSignedResourceAsyncWithHttpInfo (string id, string region = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ObjectsApi->DeleteSignedResource");

            var localVarPath = "/oss/v2/signedresources/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (region != null) localVarQueryParams.Add("region", Configuration.ApiClient.ParameterToString(region)); // query parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSignedResource", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Download an object.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="range">A range of bytes to download from the specified object. (optional)</param>
        /// <param name="ifNoneMatch">The value of this header is compared to the ETAG of the object. If they match, the body will not be included in the response. Only the object information will be included. (optional)</param>
        /// <param name="ifModifiedSince">If the requested object has not been modified since the time specified in this field, an entity will not be returned from the server; instead, a 304 (not modified) response will be returned without any message body.  (optional)</param>
        /// <param name="acceptEncoding">When gzip is specified, a gzip compressed stream of the object’s bytes will be returned in the response. Cannot use “Accept-Encoding:gzip” with Range header containing an end byte range. End byte range will not be honored if “Accept-Encoding: gzip” header is used.  (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public /*System.IO.Stream*/dynamic GetObject (string bucketKey, string objectName, string range = null, string ifNoneMatch = null, DateTime? ifModifiedSince = null, string acceptEncoding = null)
        {
             ApiResponse</*System.IO.Stream*/dynamic> localVarResponse = GetObjectWithHttpInfo(bucketKey, objectName, range, ifNoneMatch, ifModifiedSince, acceptEncoding);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Download an object.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="range">A range of bytes to download from the specified object. (optional)</param>
        /// <param name="ifNoneMatch">The value of this header is compared to the ETAG of the object. If they match, the body will not be included in the response. Only the object information will be included. (optional)</param>
        /// <param name="ifModifiedSince">If the requested object has not been modified since the time specified in this field, an entity will not be returned from the server; instead, a 304 (not modified) response will be returned without any message body.  (optional)</param>
        /// <param name="acceptEncoding">When gzip is specified, a gzip compressed stream of the object’s bytes will be returned in the response. Cannot use “Accept-Encoding:gzip” with Range header containing an end byte range. End byte range will not be honored if “Accept-Encoding: gzip” header is used.  (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< /*System.IO.Stream*/dynamic > GetObjectWithHttpInfo (string bucketKey, string objectName, string range = null, string ifNoneMatch = null, DateTime? ifModifiedSince = null, string acceptEncoding = null)
        {
            // verify the required parameter 'bucketKey' is set
            if (bucketKey == null)
                throw new ApiException(400, "Missing required parameter 'bucketKey' when calling ObjectsApi->GetObject");
            // verify the required parameter 'objectName' is set
            if (objectName == null)
                throw new ApiException(400, "Missing required parameter 'objectName' when calling ObjectsApi->GetObject");

            var localVarPath = "/oss/v2/buckets/{bucketKey}/objects/{objectName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bucketKey != null) localVarPathParams.Add("bucketKey", Configuration.ApiClient.ParameterToString(bucketKey)); // path parameter
            if (objectName != null) localVarPathParams.Add("objectName", Configuration.ApiClient.ParameterToString(objectName)); // path parameter
            if (range != null) localVarHeaderParams.Add("Range", Configuration.ApiClient.ParameterToString(range)); // header parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter
            if (acceptEncoding != null) localVarHeaderParams.Add("Accept-Encoding", Configuration.ApiClient.ParameterToString(acceptEncoding)); // header parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*System.IO.Stream*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(System.IO.Stream)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
            
        }

        /// <summary>
        ///  Download an object.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="range">A range of bytes to download from the specified object. (optional)</param>
        /// <param name="ifNoneMatch">The value of this header is compared to the ETAG of the object. If they match, the body will not be included in the response. Only the object information will be included. (optional)</param>
        /// <param name="ifModifiedSince">If the requested object has not been modified since the time specified in this field, an entity will not be returned from the server; instead, a 304 (not modified) response will be returned without any message body.  (optional)</param>
        /// <param name="acceptEncoding">When gzip is specified, a gzip compressed stream of the object’s bytes will be returned in the response. Cannot use “Accept-Encoding:gzip” with Range header containing an end byte range. End byte range will not be honored if “Accept-Encoding: gzip” header is used.  (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task</*System.IO.Stream*/dynamic> GetObjectAsync (string bucketKey, string objectName, string range = null, string ifNoneMatch = null, DateTime? ifModifiedSince = null, string acceptEncoding = null)
        {
             ApiResponse</*System.IO.Stream*/dynamic> localVarResponse = await GetObjectAsyncWithHttpInfo(bucketKey, objectName, range, ifNoneMatch, ifModifiedSince, acceptEncoding);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Download an object.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="range">A range of bytes to download from the specified object. (optional)</param>
        /// <param name="ifNoneMatch">The value of this header is compared to the ETAG of the object. If they match, the body will not be included in the response. Only the object information will be included. (optional)</param>
        /// <param name="ifModifiedSince">If the requested object has not been modified since the time specified in this field, an entity will not be returned from the server; instead, a 304 (not modified) response will be returned without any message body.  (optional)</param>
        /// <param name="acceptEncoding">When gzip is specified, a gzip compressed stream of the object’s bytes will be returned in the response. Cannot use “Accept-Encoding:gzip” with Range header containing an end byte range. End byte range will not be honored if “Accept-Encoding: gzip” header is used.  (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*System.IO.Stream*/dynamic>> GetObjectAsyncWithHttpInfo (string bucketKey, string objectName, string range = null, string ifNoneMatch = null, DateTime? ifModifiedSince = null, string acceptEncoding = null)
        {
            // verify the required parameter 'bucketKey' is set
            if (bucketKey == null)
                throw new ApiException(400, "Missing required parameter 'bucketKey' when calling ObjectsApi->GetObject");
            // verify the required parameter 'objectName' is set
            if (objectName == null)
                throw new ApiException(400, "Missing required parameter 'objectName' when calling ObjectsApi->GetObject");

            var localVarPath = "/oss/v2/buckets/{bucketKey}/objects/{objectName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bucketKey != null) localVarPathParams.Add("bucketKey", Configuration.ApiClient.ParameterToString(bucketKey)); // path parameter
            if (objectName != null) localVarPathParams.Add("objectName", Configuration.ApiClient.ParameterToString(objectName)); // path parameter
            if (range != null) localVarHeaderParams.Add("Range", Configuration.ApiClient.ParameterToString(range)); // header parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter
            if (acceptEncoding != null) localVarHeaderParams.Add("Accept-Encoding", Configuration.ApiClient.ParameterToString(acceptEncoding)); // header parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*System.IO.Stream*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(System.IO.Stream)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
            
        }

        /// <summary>
        ///  Returns object details in JSON format.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="ifModifiedSince">If the requested object has not been modified since the time specified in this field, an entity will not be returned from the server; instead, a 304 (not modified) response will be returned without any message body.  (optional)</param>
        /// <param name="with">Extra information in details; multiple uses are supported Acceptable values: &#x60;createdDate&#x60;, &#x60;lastAccessedDate&#x60;, &#x60;lastModifiedDate&#x60;  (optional)</param>
        /// <returns>ObjectFullDetails</returns>
        public /*ObjectFullDetails*/dynamic GetObjectDetails (string bucketKey, string objectName, DateTime? ifModifiedSince = null, string with = null)
        {
             ApiResponse</*ObjectFullDetails*/dynamic> localVarResponse = GetObjectDetailsWithHttpInfo(bucketKey, objectName, ifModifiedSince, with);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns object details in JSON format.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="ifModifiedSince">If the requested object has not been modified since the time specified in this field, an entity will not be returned from the server; instead, a 304 (not modified) response will be returned without any message body.  (optional)</param>
        /// <param name="with">Extra information in details; multiple uses are supported Acceptable values: &#x60;createdDate&#x60;, &#x60;lastAccessedDate&#x60;, &#x60;lastModifiedDate&#x60;  (optional)</param>
        /// <returns>ApiResponse of ObjectFullDetails</returns>
        public ApiResponse< /*ObjectFullDetails*/dynamic > GetObjectDetailsWithHttpInfo (string bucketKey, string objectName, DateTime? ifModifiedSince = null, string with = null)
        {
            // verify the required parameter 'bucketKey' is set
            if (bucketKey == null)
                throw new ApiException(400, "Missing required parameter 'bucketKey' when calling ObjectsApi->GetObjectDetails");
            // verify the required parameter 'objectName' is set
            if (objectName == null)
                throw new ApiException(400, "Missing required parameter 'objectName' when calling ObjectsApi->GetObjectDetails");

            var localVarPath = "/oss/v2/buckets/{bucketKey}/objects/{objectName}/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bucketKey != null) localVarPathParams.Add("bucketKey", Configuration.ApiClient.ParameterToString(bucketKey)); // path parameter
            if (objectName != null) localVarPathParams.Add("objectName", Configuration.ApiClient.ParameterToString(objectName)); // path parameter
            if (with != null) localVarQueryParams.Add("with", Configuration.ApiClient.ParameterToString(with)); // query parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetObjectDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*ObjectFullDetails*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(ObjectFullDetails)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(ObjectFullDetails)));
            
        }

        /// <summary>
        ///  Returns object details in JSON format.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="ifModifiedSince">If the requested object has not been modified since the time specified in this field, an entity will not be returned from the server; instead, a 304 (not modified) response will be returned without any message body.  (optional)</param>
        /// <param name="with">Extra information in details; multiple uses are supported Acceptable values: &#x60;createdDate&#x60;, &#x60;lastAccessedDate&#x60;, &#x60;lastModifiedDate&#x60;  (optional)</param>
        /// <returns>Task of ObjectFullDetails</returns>
        public async System.Threading.Tasks.Task</*ObjectFullDetails*/dynamic> GetObjectDetailsAsync (string bucketKey, string objectName, DateTime? ifModifiedSince = null, string with = null)
        {
             ApiResponse</*ObjectFullDetails*/dynamic> localVarResponse = await GetObjectDetailsAsyncWithHttpInfo(bucketKey, objectName, ifModifiedSince, with);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns object details in JSON format.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="ifModifiedSince">If the requested object has not been modified since the time specified in this field, an entity will not be returned from the server; instead, a 304 (not modified) response will be returned without any message body.  (optional)</param>
        /// <param name="with">Extra information in details; multiple uses are supported Acceptable values: &#x60;createdDate&#x60;, &#x60;lastAccessedDate&#x60;, &#x60;lastModifiedDate&#x60;  (optional)</param>
        /// <returns>Task of ApiResponse (ObjectFullDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*ObjectFullDetails*/dynamic>> GetObjectDetailsAsyncWithHttpInfo (string bucketKey, string objectName, DateTime? ifModifiedSince = null, string with = null)
        {
            // verify the required parameter 'bucketKey' is set
            if (bucketKey == null)
                throw new ApiException(400, "Missing required parameter 'bucketKey' when calling ObjectsApi->GetObjectDetails");
            // verify the required parameter 'objectName' is set
            if (objectName == null)
                throw new ApiException(400, "Missing required parameter 'objectName' when calling ObjectsApi->GetObjectDetails");

            var localVarPath = "/oss/v2/buckets/{bucketKey}/objects/{objectName}/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bucketKey != null) localVarPathParams.Add("bucketKey", Configuration.ApiClient.ParameterToString(bucketKey)); // path parameter
            if (objectName != null) localVarPathParams.Add("objectName", Configuration.ApiClient.ParameterToString(objectName)); // path parameter
            if (with != null) localVarQueryParams.Add("with", Configuration.ApiClient.ParameterToString(with)); // query parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetObjectDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*ObjectFullDetails*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(ObjectFullDetails)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(ObjectFullDetails)));
            
        }

        /// <summary>
        ///  List objects in a bucket. It is only available to the bucket creator.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="limit">Limit to the response size, Acceptable values: 1-100 Default &#x3D; 10  (optional, default to 10)</param>
        /// <param name="beginsWith">Provides a way to filter the based on object key name (optional)</param>
        /// <param name="startAt">Key to use as an offset to continue pagination This is typically the last bucket key found in a preceding GET buckets response  (optional)</param>
        /// <returns>BucketObjects</returns>
        public /*BucketObjects*/dynamic GetObjects (string bucketKey, int? limit = null, string beginsWith = null, string startAt = null)
        {
             ApiResponse</*BucketObjects*/dynamic> localVarResponse = GetObjectsWithHttpInfo(bucketKey, limit, beginsWith, startAt);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  List objects in a bucket. It is only available to the bucket creator.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="limit">Limit to the response size, Acceptable values: 1-100 Default &#x3D; 10  (optional, default to 10)</param>
        /// <param name="beginsWith">Provides a way to filter the based on object key name (optional)</param>
        /// <param name="startAt">Key to use as an offset to continue pagination This is typically the last bucket key found in a preceding GET buckets response  (optional)</param>
        /// <returns>ApiResponse of BucketObjects</returns>
        public ApiResponse< /*BucketObjects*/dynamic > GetObjectsWithHttpInfo (string bucketKey, int? limit = null, string beginsWith = null, string startAt = null)
        {
            // verify the required parameter 'bucketKey' is set
            if (bucketKey == null)
                throw new ApiException(400, "Missing required parameter 'bucketKey' when calling ObjectsApi->GetObjects");

            var localVarPath = "/oss/v2/buckets/{bucketKey}/objects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bucketKey != null) localVarPathParams.Add("bucketKey", Configuration.ApiClient.ParameterToString(bucketKey)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (beginsWith != null) localVarQueryParams.Add("beginsWith", Configuration.ApiClient.ParameterToString(beginsWith)); // query parameter
            if (startAt != null) localVarQueryParams.Add("startAt", Configuration.ApiClient.ParameterToString(startAt)); // query parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetObjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*BucketObjects*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(BucketObjects)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(BucketObjects)));
            
        }

        /// <summary>
        ///  List objects in a bucket. It is only available to the bucket creator.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="limit">Limit to the response size, Acceptable values: 1-100 Default &#x3D; 10  (optional, default to 10)</param>
        /// <param name="beginsWith">Provides a way to filter the based on object key name (optional)</param>
        /// <param name="startAt">Key to use as an offset to continue pagination This is typically the last bucket key found in a preceding GET buckets response  (optional)</param>
        /// <returns>Task of BucketObjects</returns>
        public async System.Threading.Tasks.Task</*BucketObjects*/dynamic> GetObjectsAsync (string bucketKey, int? limit = null, string beginsWith = null, string startAt = null)
        {
             ApiResponse</*BucketObjects*/dynamic> localVarResponse = await GetObjectsAsyncWithHttpInfo(bucketKey, limit, beginsWith, startAt);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  List objects in a bucket. It is only available to the bucket creator.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="limit">Limit to the response size, Acceptable values: 1-100 Default &#x3D; 10  (optional, default to 10)</param>
        /// <param name="beginsWith">Provides a way to filter the based on object key name (optional)</param>
        /// <param name="startAt">Key to use as an offset to continue pagination This is typically the last bucket key found in a preceding GET buckets response  (optional)</param>
        /// <returns>Task of ApiResponse (BucketObjects)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*BucketObjects*/dynamic>> GetObjectsAsyncWithHttpInfo (string bucketKey, int? limit = null, string beginsWith = null, string startAt = null)
        {
            // verify the required parameter 'bucketKey' is set
            if (bucketKey == null)
                throw new ApiException(400, "Missing required parameter 'bucketKey' when calling ObjectsApi->GetObjects");

            var localVarPath = "/oss/v2/buckets/{bucketKey}/objects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bucketKey != null) localVarPathParams.Add("bucketKey", Configuration.ApiClient.ParameterToString(bucketKey)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (beginsWith != null) localVarQueryParams.Add("beginsWith", Configuration.ApiClient.ParameterToString(beginsWith)); // query parameter
            if (startAt != null) localVarQueryParams.Add("startAt", Configuration.ApiClient.ParameterToString(startAt)); // query parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetObjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*BucketObjects*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(BucketObjects)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(BucketObjects)));
            
        }

        /// <summary>
        ///  Download an object using a signed URL.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of signed resource</param>
        /// <param name="range">A range of bytes to download from the specified object. (optional)</param>
        /// <param name="ifNoneMatch">The value of this header is compared to the ETAG of the object. If they match, the body will not be included in the response. Only the object information will be included. (optional)</param>
        /// <param name="ifModifiedSince">If the requested object has not been modified since the time specified in this field, an entity will not be returned from the server; instead, a 304 (not modified) response will be returned without any message body.  (optional)</param>
        /// <param name="acceptEncoding">When gzip is specified, a gzip compressed stream of the object’s bytes will be returned in the response. Cannot use “Accept-Encoding:gzip” with Range header containing an end byte range. End byte range will not be honored if “Accept-Encoding: gzip” header is used.  (optional)</param>
        /// <param name="region">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
        /// <returns>System.IO.Stream</returns>
        public /*System.IO.Stream*/dynamic GetSignedResource (string id, string range = null, string ifNoneMatch = null, DateTime? ifModifiedSince = null, string acceptEncoding = null, string region = null)
        {
             ApiResponse</*System.IO.Stream*/dynamic> localVarResponse = GetSignedResourceWithHttpInfo(id, range, ifNoneMatch, ifModifiedSince, acceptEncoding, region);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Download an object using a signed URL.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of signed resource</param>
        /// <param name="range">A range of bytes to download from the specified object. (optional)</param>
        /// <param name="ifNoneMatch">The value of this header is compared to the ETAG of the object. If they match, the body will not be included in the response. Only the object information will be included. (optional)</param>
        /// <param name="ifModifiedSince">If the requested object has not been modified since the time specified in this field, an entity will not be returned from the server; instead, a 304 (not modified) response will be returned without any message body.  (optional)</param>
        /// <param name="acceptEncoding">When gzip is specified, a gzip compressed stream of the object’s bytes will be returned in the response. Cannot use “Accept-Encoding:gzip” with Range header containing an end byte range. End byte range will not be honored if “Accept-Encoding: gzip” header is used.  (optional)</param>
        /// <param name="region">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< /*System.IO.Stream*/dynamic > GetSignedResourceWithHttpInfo (string id, string range = null, string ifNoneMatch = null, DateTime? ifModifiedSince = null, string acceptEncoding = null, string region = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ObjectsApi->GetSignedResource");

            var localVarPath = "/oss/v2/signedresources/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (region != null) localVarQueryParams.Add("region", Configuration.ApiClient.ParameterToString(region)); // query parameter
            if (range != null) localVarHeaderParams.Add("Range", Configuration.ApiClient.ParameterToString(range)); // header parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter
            if (acceptEncoding != null) localVarHeaderParams.Add("Accept-Encoding", Configuration.ApiClient.ParameterToString(acceptEncoding)); // header parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSignedResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*System.IO.Stream*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(System.IO.Stream)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
            
        }

        /// <summary>
        ///  Download an object using a signed URL.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of signed resource</param>
        /// <param name="range">A range of bytes to download from the specified object. (optional)</param>
        /// <param name="ifNoneMatch">The value of this header is compared to the ETAG of the object. If they match, the body will not be included in the response. Only the object information will be included. (optional)</param>
        /// <param name="ifModifiedSince">If the requested object has not been modified since the time specified in this field, an entity will not be returned from the server; instead, a 304 (not modified) response will be returned without any message body.  (optional)</param>
        /// <param name="acceptEncoding">When gzip is specified, a gzip compressed stream of the object’s bytes will be returned in the response. Cannot use “Accept-Encoding:gzip” with Range header containing an end byte range. End byte range will not be honored if “Accept-Encoding: gzip” header is used.  (optional)</param>
        /// <param name="region">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task</*System.IO.Stream*/dynamic> GetSignedResourceAsync (string id, string range = null, string ifNoneMatch = null, DateTime? ifModifiedSince = null, string acceptEncoding = null, string region = null)
        {
             ApiResponse</*System.IO.Stream*/dynamic> localVarResponse = await GetSignedResourceAsyncWithHttpInfo(id, range, ifNoneMatch, ifModifiedSince, acceptEncoding, region);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Download an object using a signed URL.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of signed resource</param>
        /// <param name="range">A range of bytes to download from the specified object. (optional)</param>
        /// <param name="ifNoneMatch">The value of this header is compared to the ETAG of the object. If they match, the body will not be included in the response. Only the object information will be included. (optional)</param>
        /// <param name="ifModifiedSince">If the requested object has not been modified since the time specified in this field, an entity will not be returned from the server; instead, a 304 (not modified) response will be returned without any message body.  (optional)</param>
        /// <param name="acceptEncoding">When gzip is specified, a gzip compressed stream of the object’s bytes will be returned in the response. Cannot use “Accept-Encoding:gzip” with Range header containing an end byte range. End byte range will not be honored if “Accept-Encoding: gzip” header is used.  (optional)</param>
        /// <param name="region">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*System.IO.Stream*/dynamic>> GetSignedResourceAsyncWithHttpInfo (string id, string range = null, string ifNoneMatch = null, DateTime? ifModifiedSince = null, string acceptEncoding = null, string region = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ObjectsApi->GetSignedResource");

            var localVarPath = "/oss/v2/signedresources/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (region != null) localVarQueryParams.Add("region", Configuration.ApiClient.ParameterToString(region)); // query parameter
            if (range != null) localVarHeaderParams.Add("Range", Configuration.ApiClient.ParameterToString(range)); // header parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter
            if (acceptEncoding != null) localVarHeaderParams.Add("Accept-Encoding", Configuration.ApiClient.ParameterToString(acceptEncoding)); // header parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSignedResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*System.IO.Stream*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(System.IO.Stream)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
            
        }

        /// <summary>
        ///  This endpoint returns status information about a resumable upload.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="sessionId">Unique identifier of a session of a file being uploaded</param>
        /// <returns></returns>
        public void GetStatusBySessionId (string bucketKey, string objectName, string sessionId)
        {
             GetStatusBySessionIdWithHttpInfo(bucketKey, objectName, sessionId);
        }

        /// <summary>
        ///  This endpoint returns status information about a resumable upload.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="sessionId">Unique identifier of a session of a file being uploaded</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetStatusBySessionIdWithHttpInfo (string bucketKey, string objectName, string sessionId)
        {
            // verify the required parameter 'bucketKey' is set
            if (bucketKey == null)
                throw new ApiException(400, "Missing required parameter 'bucketKey' when calling ObjectsApi->GetStatusBySessionId");
            // verify the required parameter 'objectName' is set
            if (objectName == null)
                throw new ApiException(400, "Missing required parameter 'objectName' when calling ObjectsApi->GetStatusBySessionId");
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling ObjectsApi->GetStatusBySessionId");

            var localVarPath = "/oss/v2/buckets/{bucketKey}/objects/{objectName}/status/{sessionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bucketKey != null) localVarPathParams.Add("bucketKey", Configuration.ApiClient.ParameterToString(bucketKey)); // path parameter
            if (objectName != null) localVarPathParams.Add("objectName", Configuration.ApiClient.ParameterToString(objectName)); // path parameter
            if (sessionId != null) localVarPathParams.Add("sessionId", Configuration.ApiClient.ParameterToString(sessionId)); // path parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatusBySessionId", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  This endpoint returns status information about a resumable upload.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="sessionId">Unique identifier of a session of a file being uploaded</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetStatusBySessionIdAsync (string bucketKey, string objectName, string sessionId)
        {
             await GetStatusBySessionIdAsyncWithHttpInfo(bucketKey, objectName, sessionId);

        }

        /// <summary>
        ///  This endpoint returns status information about a resumable upload.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="sessionId">Unique identifier of a session of a file being uploaded</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetStatusBySessionIdAsyncWithHttpInfo (string bucketKey, string objectName, string sessionId)
        {
            // verify the required parameter 'bucketKey' is set
            if (bucketKey == null)
                throw new ApiException(400, "Missing required parameter 'bucketKey' when calling ObjectsApi->GetStatusBySessionId");
            // verify the required parameter 'objectName' is set
            if (objectName == null)
                throw new ApiException(400, "Missing required parameter 'objectName' when calling ObjectsApi->GetStatusBySessionId");
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling ObjectsApi->GetStatusBySessionId");

            var localVarPath = "/oss/v2/buckets/{bucketKey}/objects/{objectName}/status/{sessionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bucketKey != null) localVarPathParams.Add("bucketKey", Configuration.ApiClient.ParameterToString(bucketKey)); // path parameter
            if (objectName != null) localVarPathParams.Add("objectName", Configuration.ApiClient.ParameterToString(objectName)); // path parameter
            if (sessionId != null) localVarPathParams.Add("sessionId", Configuration.ApiClient.ParameterToString(sessionId)); // path parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatusBySessionId", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  This endpoint allows resumable uploads for large files in chunks.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="contentLength">Indicates the size of the request body.</param>
        /// <param name="contentRange">Byte range of a segment being uploaded</param>
        /// <param name="sessionId">Unique identifier of a session of a file being uploaded</param>
        /// <param name="body"></param>
        /// <param name="contentDisposition">The suggested default filename when downloading this object to a file after it has been uploaded. (optional)</param>
        /// <param name="ifMatch">If-Match header containing a SHA-1 hash of the bytes in the request body can be sent by the calling service or client application with the request. If present, OSS will use the value of If-Match header to verify that a SHA-1 calculated for the uploaded bytes server side matches what was sent in the header. If not, the request is failed with a status 412 Precondition Failed and the data is not written.  (optional)</param>
        /// <returns>ObjectDetails</returns>
        public /*ObjectDetails*/dynamic UploadChunk (string bucketKey, string objectName, int? contentLength, string contentRange, string sessionId, System.IO.Stream body, string contentDisposition = null, string ifMatch = null)
        {
             ApiResponse</*ObjectDetails*/dynamic> localVarResponse = UploadChunkWithHttpInfo(bucketKey, objectName, contentLength, contentRange, sessionId, body, contentDisposition, ifMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This endpoint allows resumable uploads for large files in chunks.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="contentLength">Indicates the size of the request body.</param>
        /// <param name="contentRange">Byte range of a segment being uploaded</param>
        /// <param name="sessionId">Unique identifier of a session of a file being uploaded</param>
        /// <param name="body"></param>
        /// <param name="contentDisposition">The suggested default filename when downloading this object to a file after it has been uploaded. (optional)</param>
        /// <param name="ifMatch">If-Match header containing a SHA-1 hash of the bytes in the request body can be sent by the calling service or client application with the request. If present, OSS will use the value of If-Match header to verify that a SHA-1 calculated for the uploaded bytes server side matches what was sent in the header. If not, the request is failed with a status 412 Precondition Failed and the data is not written.  (optional)</param>
        /// <returns>ApiResponse of ObjectDetails</returns>
        public ApiResponse< /*ObjectDetails*/dynamic > UploadChunkWithHttpInfo (string bucketKey, string objectName, int? contentLength, string contentRange, string sessionId, System.IO.Stream body, string contentDisposition = null, string ifMatch = null)
        {
            // verify the required parameter 'bucketKey' is set
            if (bucketKey == null)
                throw new ApiException(400, "Missing required parameter 'bucketKey' when calling ObjectsApi->UploadChunk");
            // verify the required parameter 'objectName' is set
            if (objectName == null)
                throw new ApiException(400, "Missing required parameter 'objectName' when calling ObjectsApi->UploadChunk");
            // verify the required parameter 'contentLength' is set
            if (contentLength == null)
                throw new ApiException(400, "Missing required parameter 'contentLength' when calling ObjectsApi->UploadChunk");
            // verify the required parameter 'contentRange' is set
            if (contentRange == null)
                throw new ApiException(400, "Missing required parameter 'contentRange' when calling ObjectsApi->UploadChunk");
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling ObjectsApi->UploadChunk");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ObjectsApi->UploadChunk");

            var localVarPath = "/oss/v2/buckets/{bucketKey}/objects/{objectName}/resumable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bucketKey != null) localVarPathParams.Add("bucketKey", Configuration.ApiClient.ParameterToString(bucketKey)); // path parameter
            if (objectName != null) localVarPathParams.Add("objectName", Configuration.ApiClient.ParameterToString(objectName)); // path parameter
            if (contentLength != null) localVarHeaderParams.Add("Content-Length", Configuration.ApiClient.ParameterToString(contentLength)); // header parameter
            if (contentRange != null) localVarHeaderParams.Add("Content-Range", Configuration.ApiClient.ParameterToString(contentRange)); // header parameter
            if (contentDisposition != null) localVarHeaderParams.Add("Content-Disposition", Configuration.ApiClient.ParameterToString(contentDisposition)); // header parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter
            if (sessionId != null) localVarHeaderParams.Add("Session-Id", Configuration.ApiClient.ParameterToString(sessionId)); // header parameter
            if (body != null && body.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = body; // byte array
            }
            else if (   body != null
                     && (   body.GetType() == typeof(System.IO.FileStream)
                         || body.GetType() == typeof(System.IO.BinaryReader)
                         || body.GetType() == typeof(System.IO.BufferedStream)
                   	     || body.GetType() == typeof(System.IO.MemoryStream)
                   	     || body.GetType() == typeof(System.IO.StreamReader)
                   	    )
                    )
            {
                localVarPostBody =Configuration.ApiClient.toByteArray(body); // byte array
            }
            else if ( body != null )
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body);
            }

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadChunk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*ObjectDetails*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(ObjectDetails)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(ObjectDetails)));
            
        }

        /// <summary>
        ///  This endpoint allows resumable uploads for large files in chunks.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="contentLength">Indicates the size of the request body.</param>
        /// <param name="contentRange">Byte range of a segment being uploaded</param>
        /// <param name="sessionId">Unique identifier of a session of a file being uploaded</param>
        /// <param name="body"></param>
        /// <param name="contentDisposition">The suggested default filename when downloading this object to a file after it has been uploaded. (optional)</param>
        /// <param name="ifMatch">If-Match header containing a SHA-1 hash of the bytes in the request body can be sent by the calling service or client application with the request. If present, OSS will use the value of If-Match header to verify that a SHA-1 calculated for the uploaded bytes server side matches what was sent in the header. If not, the request is failed with a status 412 Precondition Failed and the data is not written.  (optional)</param>
        /// <returns>Task of ObjectDetails</returns>
        public async System.Threading.Tasks.Task</*ObjectDetails*/dynamic> UploadChunkAsync (string bucketKey, string objectName, int? contentLength, string contentRange, string sessionId, System.IO.Stream body, string contentDisposition = null, string ifMatch = null)
        {
             ApiResponse</*ObjectDetails*/dynamic> localVarResponse = await UploadChunkAsyncWithHttpInfo(bucketKey, objectName, contentLength, contentRange, sessionId, body, contentDisposition, ifMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This endpoint allows resumable uploads for large files in chunks.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="contentLength">Indicates the size of the request body.</param>
        /// <param name="contentRange">Byte range of a segment being uploaded</param>
        /// <param name="sessionId">Unique identifier of a session of a file being uploaded</param>
        /// <param name="body"></param>
        /// <param name="contentDisposition">The suggested default filename when downloading this object to a file after it has been uploaded. (optional)</param>
        /// <param name="ifMatch">If-Match header containing a SHA-1 hash of the bytes in the request body can be sent by the calling service or client application with the request. If present, OSS will use the value of If-Match header to verify that a SHA-1 calculated for the uploaded bytes server side matches what was sent in the header. If not, the request is failed with a status 412 Precondition Failed and the data is not written.  (optional)</param>
        /// <returns>Task of ApiResponse (ObjectDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*ObjectDetails*/dynamic>> UploadChunkAsyncWithHttpInfo (string bucketKey, string objectName, int? contentLength, string contentRange, string sessionId, System.IO.Stream body, string contentDisposition = null, string ifMatch = null)
        {
            // verify the required parameter 'bucketKey' is set
            if (bucketKey == null)
                throw new ApiException(400, "Missing required parameter 'bucketKey' when calling ObjectsApi->UploadChunk");
            // verify the required parameter 'objectName' is set
            if (objectName == null)
                throw new ApiException(400, "Missing required parameter 'objectName' when calling ObjectsApi->UploadChunk");
            // verify the required parameter 'contentLength' is set
            if (contentLength == null)
                throw new ApiException(400, "Missing required parameter 'contentLength' when calling ObjectsApi->UploadChunk");
            // verify the required parameter 'contentRange' is set
            if (contentRange == null)
                throw new ApiException(400, "Missing required parameter 'contentRange' when calling ObjectsApi->UploadChunk");
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling ObjectsApi->UploadChunk");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ObjectsApi->UploadChunk");

            var localVarPath = "/oss/v2/buckets/{bucketKey}/objects/{objectName}/resumable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bucketKey != null) localVarPathParams.Add("bucketKey", Configuration.ApiClient.ParameterToString(bucketKey)); // path parameter
            if (objectName != null) localVarPathParams.Add("objectName", Configuration.ApiClient.ParameterToString(objectName)); // path parameter
            if (contentLength != null) localVarHeaderParams.Add("Content-Length", Configuration.ApiClient.ParameterToString(contentLength)); // header parameter
            if (contentRange != null) localVarHeaderParams.Add("Content-Range", Configuration.ApiClient.ParameterToString(contentRange)); // header parameter
            if (contentDisposition != null) localVarHeaderParams.Add("Content-Disposition", Configuration.ApiClient.ParameterToString(contentDisposition)); // header parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter
            if (sessionId != null) localVarHeaderParams.Add("Session-Id", Configuration.ApiClient.ParameterToString(sessionId)); // header parameter
            if (body != null && body.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = body; // byte array
            }
            else if (   body != null
                     && (   body.GetType() == typeof(System.IO.FileStream)
                         || body.GetType() == typeof(System.IO.BinaryReader)
                         || body.GetType() == typeof(System.IO.BufferedStream)
                   	     || body.GetType() == typeof(System.IO.MemoryStream)
                   	     || body.GetType() == typeof(System.IO.StreamReader)
                   	    )
                    )
            {
                localVarPostBody =Configuration.ApiClient.toByteArray(body); // byte array
            }
            else if ( body != null )
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body);
            }

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadChunk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*ObjectDetails*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(ObjectDetails)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(ObjectDetails)));
            
        }

        /// <summary>
        ///  Upload an object. If the specified object name already exists in the bucket, the uploaded content will overwrite the existing content for the bucket name/object name combination. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="contentLength">Indicates the size of the request body.</param>
        /// <param name="body"></param>
        /// <param name="contentDisposition">The suggested default filename when downloading this object to a file after it has been uploaded. (optional)</param>
        /// <param name="ifMatch">If-Match header containing a SHA-1 hash of the bytes in the request body can be sent by the calling service or client application with the request. If present, OSS will use the value of If-Match header to verify that a SHA-1 calculated for the uploaded bytes server side matches what was sent in the header. If not, the request is failed with a status 412 Precondition Failed and the data is not written.  (optional)</param>
        /// <returns>ObjectDetails</returns>
        public /*ObjectDetails*/dynamic UploadObject (string bucketKey, string objectName, int? contentLength, System.IO.Stream body, string contentDisposition = null, string ifMatch = null)
        {
             ApiResponse</*ObjectDetails*/dynamic> localVarResponse = UploadObjectWithHttpInfo(bucketKey, objectName, contentLength, body, contentDisposition, ifMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Upload an object. If the specified object name already exists in the bucket, the uploaded content will overwrite the existing content for the bucket name/object name combination. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="contentLength">Indicates the size of the request body.</param>
        /// <param name="body"></param>
        /// <param name="contentDisposition">The suggested default filename when downloading this object to a file after it has been uploaded. (optional)</param>
        /// <param name="ifMatch">If-Match header containing a SHA-1 hash of the bytes in the request body can be sent by the calling service or client application with the request. If present, OSS will use the value of If-Match header to verify that a SHA-1 calculated for the uploaded bytes server side matches what was sent in the header. If not, the request is failed with a status 412 Precondition Failed and the data is not written.  (optional)</param>
        /// <returns>ApiResponse of ObjectDetails</returns>
        public ApiResponse< /*ObjectDetails*/dynamic > UploadObjectWithHttpInfo (string bucketKey, string objectName, int? contentLength, System.IO.Stream body, string contentDisposition = null, string ifMatch = null)
        {
            // verify the required parameter 'bucketKey' is set
            if (bucketKey == null)
                throw new ApiException(400, "Missing required parameter 'bucketKey' when calling ObjectsApi->UploadObject");
            // verify the required parameter 'objectName' is set
            if (objectName == null)
                throw new ApiException(400, "Missing required parameter 'objectName' when calling ObjectsApi->UploadObject");
            // verify the required parameter 'contentLength' is set
            if (contentLength == null)
                throw new ApiException(400, "Missing required parameter 'contentLength' when calling ObjectsApi->UploadObject");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ObjectsApi->UploadObject");

            var localVarPath = "/oss/v2/buckets/{bucketKey}/objects/{objectName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bucketKey != null) localVarPathParams.Add("bucketKey", Configuration.ApiClient.ParameterToString(bucketKey)); // path parameter
            if (objectName != null) localVarPathParams.Add("objectName", Configuration.ApiClient.ParameterToString(objectName)); // path parameter
            if (contentLength != null) localVarHeaderParams.Add("Content-Length", Configuration.ApiClient.ParameterToString(contentLength)); // header parameter
            if (contentDisposition != null) localVarHeaderParams.Add("Content-Disposition", Configuration.ApiClient.ParameterToString(contentDisposition)); // header parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter
            if (body != null && body.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = body; // byte array
            }
            else if (   body != null
                     && (   body.GetType() == typeof(System.IO.FileStream)
                         || body.GetType() == typeof(System.IO.BinaryReader)
                         || body.GetType() == typeof(System.IO.BufferedStream)
                   	     || body.GetType() == typeof(System.IO.MemoryStream)
                   	     || body.GetType() == typeof(System.IO.StreamReader)
                   	    )
                    )
            {
                localVarPostBody =Configuration.ApiClient.toByteArray(body); // byte array
            }
            else if ( body != null )
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body);
            }

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*ObjectDetails*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(ObjectDetails)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(ObjectDetails)));
            
        }

        /// <summary>
        ///  Upload an object. If the specified object name already exists in the bucket, the uploaded content will overwrite the existing content for the bucket name/object name combination. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="contentLength">Indicates the size of the request body.</param>
        /// <param name="body"></param>
        /// <param name="contentDisposition">The suggested default filename when downloading this object to a file after it has been uploaded. (optional)</param>
        /// <param name="ifMatch">If-Match header containing a SHA-1 hash of the bytes in the request body can be sent by the calling service or client application with the request. If present, OSS will use the value of If-Match header to verify that a SHA-1 calculated for the uploaded bytes server side matches what was sent in the header. If not, the request is failed with a status 412 Precondition Failed and the data is not written.  (optional)</param>
        /// <returns>Task of ObjectDetails</returns>
        public async System.Threading.Tasks.Task</*ObjectDetails*/dynamic> UploadObjectAsync (string bucketKey, string objectName, int? contentLength, System.IO.Stream body, string contentDisposition = null, string ifMatch = null)
        {
             ApiResponse</*ObjectDetails*/dynamic> localVarResponse = await UploadObjectAsyncWithHttpInfo(bucketKey, objectName, contentLength, body, contentDisposition, ifMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Upload an object. If the specified object name already exists in the bucket, the uploaded content will overwrite the existing content for the bucket name/object name combination. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketKey">URL-encoded bucket key</param>
        /// <param name="objectName">URL-encoded object name</param>
        /// <param name="contentLength">Indicates the size of the request body.</param>
        /// <param name="body"></param>
        /// <param name="contentDisposition">The suggested default filename when downloading this object to a file after it has been uploaded. (optional)</param>
        /// <param name="ifMatch">If-Match header containing a SHA-1 hash of the bytes in the request body can be sent by the calling service or client application with the request. If present, OSS will use the value of If-Match header to verify that a SHA-1 calculated for the uploaded bytes server side matches what was sent in the header. If not, the request is failed with a status 412 Precondition Failed and the data is not written.  (optional)</param>
        /// <returns>Task of ApiResponse (ObjectDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*ObjectDetails*/dynamic>> UploadObjectAsyncWithHttpInfo (string bucketKey, string objectName, int? contentLength, System.IO.Stream body, string contentDisposition = null, string ifMatch = null)
        {
            // verify the required parameter 'bucketKey' is set
            if (bucketKey == null)
                throw new ApiException(400, "Missing required parameter 'bucketKey' when calling ObjectsApi->UploadObject");
            // verify the required parameter 'objectName' is set
            if (objectName == null)
                throw new ApiException(400, "Missing required parameter 'objectName' when calling ObjectsApi->UploadObject");
            // verify the required parameter 'contentLength' is set
            if (contentLength == null)
                throw new ApiException(400, "Missing required parameter 'contentLength' when calling ObjectsApi->UploadObject");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ObjectsApi->UploadObject");

            var localVarPath = "/oss/v2/buckets/{bucketKey}/objects/{objectName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bucketKey != null) localVarPathParams.Add("bucketKey", Configuration.ApiClient.ParameterToString(bucketKey)); // path parameter
            if (objectName != null) localVarPathParams.Add("objectName", Configuration.ApiClient.ParameterToString(objectName)); // path parameter
            if (contentLength != null) localVarHeaderParams.Add("Content-Length", Configuration.ApiClient.ParameterToString(contentLength)); // header parameter
            if (contentDisposition != null) localVarHeaderParams.Add("Content-Disposition", Configuration.ApiClient.ParameterToString(contentDisposition)); // header parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter
            if (body != null && body.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = body; // byte array
            }
            else if (   body != null
                     && (   body.GetType() == typeof(System.IO.FileStream)
                         || body.GetType() == typeof(System.IO.BinaryReader)
                         || body.GetType() == typeof(System.IO.BufferedStream)
                   	     || body.GetType() == typeof(System.IO.MemoryStream)
                   	     || body.GetType() == typeof(System.IO.StreamReader)
                   	    )
                    )
            {
                localVarPostBody =Configuration.ApiClient.toByteArray(body); // byte array
            }
            else if ( body != null )
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body);
            }

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*ObjectDetails*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(ObjectDetails)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(ObjectDetails)));
            
        }

        /// <summary>
        ///  Overwrite a existing object using a signed URL.  Conditions to call this operation:  Object is available Expiration period is valid Signed URL should be created with &#x60;write&#x60; or &#x60;readwrite&#x60; 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of signed resource</param>
        /// <param name="contentLength">Indicates the size of the request body.</param>
        /// <param name="body"></param>
        /// <param name="contentDisposition">The suggested default filename when downloading this object to a file after it has been uploaded. (optional)</param>
        /// <param name="xAdsRegion">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
        /// <param name="ifMatch">If-Match header containing a SHA-1 hash of the bytes in the request body can be sent by the calling service or client application with the request. If present, OSS will use the value of If-Match header to verify that a SHA-1 calculated for the uploaded bytes server side matches what was sent in the header. If not, the request is failed with a status 412 Precondition Failed and the data is not written.  (optional)</param>
        /// <returns>ObjectDetails</returns>
        public /*ObjectDetails*/dynamic UploadSignedResource (string id, int? contentLength, System.IO.Stream body, string contentDisposition = null, string xAdsRegion = null, string ifMatch = null)
        {
             ApiResponse</*ObjectDetails*/dynamic> localVarResponse = UploadSignedResourceWithHttpInfo(id, contentLength, body, contentDisposition, xAdsRegion, ifMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Overwrite a existing object using a signed URL.  Conditions to call this operation:  Object is available Expiration period is valid Signed URL should be created with &#x60;write&#x60; or &#x60;readwrite&#x60; 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of signed resource</param>
        /// <param name="contentLength">Indicates the size of the request body.</param>
        /// <param name="body"></param>
        /// <param name="contentDisposition">The suggested default filename when downloading this object to a file after it has been uploaded. (optional)</param>
        /// <param name="xAdsRegion">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
        /// <param name="ifMatch">If-Match header containing a SHA-1 hash of the bytes in the request body can be sent by the calling service or client application with the request. If present, OSS will use the value of If-Match header to verify that a SHA-1 calculated for the uploaded bytes server side matches what was sent in the header. If not, the request is failed with a status 412 Precondition Failed and the data is not written.  (optional)</param>
        /// <returns>ApiResponse of ObjectDetails</returns>
        public ApiResponse< /*ObjectDetails*/dynamic > UploadSignedResourceWithHttpInfo (string id, int? contentLength, System.IO.Stream body, string contentDisposition = null, string xAdsRegion = null, string ifMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ObjectsApi->UploadSignedResource");
            // verify the required parameter 'contentLength' is set
            if (contentLength == null)
                throw new ApiException(400, "Missing required parameter 'contentLength' when calling ObjectsApi->UploadSignedResource");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ObjectsApi->UploadSignedResource");

            var localVarPath = "/oss/v2/signedresources/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (contentLength != null) localVarHeaderParams.Add("Content-Length", Configuration.ApiClient.ParameterToString(contentLength)); // header parameter
            if (contentDisposition != null) localVarHeaderParams.Add("Content-Disposition", Configuration.ApiClient.ParameterToString(contentDisposition)); // header parameter
            if (xAdsRegion != null) localVarHeaderParams.Add("x-ads-region", Configuration.ApiClient.ParameterToString(xAdsRegion)); // header parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter
            if (body != null && body.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = body; // byte array
            }
            else if (   body != null
                     && (   body.GetType() == typeof(System.IO.FileStream)
                         || body.GetType() == typeof(System.IO.BinaryReader)
                         || body.GetType() == typeof(System.IO.BufferedStream)
                   	     || body.GetType() == typeof(System.IO.MemoryStream)
                   	     || body.GetType() == typeof(System.IO.StreamReader)
                   	    )
                    )
            {
                localVarPostBody =Configuration.ApiClient.toByteArray(body); // byte array
            }
            else if ( body != null )
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body);
            }

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadSignedResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*ObjectDetails*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(ObjectDetails)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(ObjectDetails)));
            
        }

        /// <summary>
        ///  Overwrite a existing object using a signed URL.  Conditions to call this operation:  Object is available Expiration period is valid Signed URL should be created with &#x60;write&#x60; or &#x60;readwrite&#x60; 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of signed resource</param>
        /// <param name="contentLength">Indicates the size of the request body.</param>
        /// <param name="body"></param>
        /// <param name="contentDisposition">The suggested default filename when downloading this object to a file after it has been uploaded. (optional)</param>
        /// <param name="xAdsRegion">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
        /// <param name="ifMatch">If-Match header containing a SHA-1 hash of the bytes in the request body can be sent by the calling service or client application with the request. If present, OSS will use the value of If-Match header to verify that a SHA-1 calculated for the uploaded bytes server side matches what was sent in the header. If not, the request is failed with a status 412 Precondition Failed and the data is not written.  (optional)</param>
        /// <returns>Task of ObjectDetails</returns>
        public async System.Threading.Tasks.Task</*ObjectDetails*/dynamic> UploadSignedResourceAsync (string id, int? contentLength, System.IO.Stream body, string contentDisposition = null, string xAdsRegion = null, string ifMatch = null)
        {
             ApiResponse</*ObjectDetails*/dynamic> localVarResponse = await UploadSignedResourceAsyncWithHttpInfo(id, contentLength, body, contentDisposition, xAdsRegion, ifMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Overwrite a existing object using a signed URL.  Conditions to call this operation:  Object is available Expiration period is valid Signed URL should be created with &#x60;write&#x60; or &#x60;readwrite&#x60; 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of signed resource</param>
        /// <param name="contentLength">Indicates the size of the request body.</param>
        /// <param name="body"></param>
        /// <param name="contentDisposition">The suggested default filename when downloading this object to a file after it has been uploaded. (optional)</param>
        /// <param name="xAdsRegion">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
        /// <param name="ifMatch">If-Match header containing a SHA-1 hash of the bytes in the request body can be sent by the calling service or client application with the request. If present, OSS will use the value of If-Match header to verify that a SHA-1 calculated for the uploaded bytes server side matches what was sent in the header. If not, the request is failed with a status 412 Precondition Failed and the data is not written.  (optional)</param>
        /// <returns>Task of ApiResponse (ObjectDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*ObjectDetails*/dynamic>> UploadSignedResourceAsyncWithHttpInfo (string id, int? contentLength, System.IO.Stream body, string contentDisposition = null, string xAdsRegion = null, string ifMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ObjectsApi->UploadSignedResource");
            // verify the required parameter 'contentLength' is set
            if (contentLength == null)
                throw new ApiException(400, "Missing required parameter 'contentLength' when calling ObjectsApi->UploadSignedResource");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ObjectsApi->UploadSignedResource");

            var localVarPath = "/oss/v2/signedresources/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (contentLength != null) localVarHeaderParams.Add("Content-Length", Configuration.ApiClient.ParameterToString(contentLength)); // header parameter
            if (contentDisposition != null) localVarHeaderParams.Add("Content-Disposition", Configuration.ApiClient.ParameterToString(contentDisposition)); // header parameter
            if (xAdsRegion != null) localVarHeaderParams.Add("x-ads-region", Configuration.ApiClient.ParameterToString(xAdsRegion)); // header parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter
            if (body != null && body.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = body; // byte array
            }
            else if (   body != null
                     && (   body.GetType() == typeof(System.IO.FileStream)
                         || body.GetType() == typeof(System.IO.BinaryReader)
                         || body.GetType() == typeof(System.IO.BufferedStream)
                   	     || body.GetType() == typeof(System.IO.MemoryStream)
                   	     || body.GetType() == typeof(System.IO.StreamReader)
                   	    )
                    )
            {
                localVarPostBody =Configuration.ApiClient.toByteArray(body); // byte array
            }
            else if ( body != null )
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body);
            }

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadSignedResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*ObjectDetails*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(ObjectDetails)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(ObjectDetails)));
            
        }

        /// <summary>
        ///  Resumable upload for signed URLs.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of signed resource</param>
        /// <param name="contentRange">Byte range of a segment being uploaded</param>
        /// <param name="sessionId">Unique identifier of a session of a file being uploaded</param>
        /// <param name="body"></param>
        /// <param name="contentDisposition">The suggested default filename when downloading this object to a file after it has been uploaded. (optional)</param>
        /// <param name="xAdsRegion">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
        /// <returns>ObjectDetails</returns>
        public /*ObjectDetails*/dynamic UploadSignedResourcesChunk (string id, string contentRange, string sessionId, System.IO.Stream body, string contentDisposition = null, string xAdsRegion = null)
        {
             ApiResponse</*ObjectDetails*/dynamic> localVarResponse = UploadSignedResourcesChunkWithHttpInfo(id, contentRange, sessionId, body, contentDisposition, xAdsRegion);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Resumable upload for signed URLs.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of signed resource</param>
        /// <param name="contentRange">Byte range of a segment being uploaded</param>
        /// <param name="sessionId">Unique identifier of a session of a file being uploaded</param>
        /// <param name="body"></param>
        /// <param name="contentDisposition">The suggested default filename when downloading this object to a file after it has been uploaded. (optional)</param>
        /// <param name="xAdsRegion">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
        /// <returns>ApiResponse of ObjectDetails</returns>
        public ApiResponse< /*ObjectDetails*/dynamic > UploadSignedResourcesChunkWithHttpInfo (string id, string contentRange, string sessionId, System.IO.Stream body, string contentDisposition = null, string xAdsRegion = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ObjectsApi->UploadSignedResourcesChunk");
            // verify the required parameter 'contentRange' is set
            if (contentRange == null)
                throw new ApiException(400, "Missing required parameter 'contentRange' when calling ObjectsApi->UploadSignedResourcesChunk");
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling ObjectsApi->UploadSignedResourcesChunk");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ObjectsApi->UploadSignedResourcesChunk");

            var localVarPath = "/oss/v2/signedresources/{id}/resumable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (contentRange != null) localVarHeaderParams.Add("Content-Range", Configuration.ApiClient.ParameterToString(contentRange)); // header parameter
            if (contentDisposition != null) localVarHeaderParams.Add("Content-Disposition", Configuration.ApiClient.ParameterToString(contentDisposition)); // header parameter
            if (xAdsRegion != null) localVarHeaderParams.Add("x-ads-region", Configuration.ApiClient.ParameterToString(xAdsRegion)); // header parameter
            if (sessionId != null) localVarHeaderParams.Add("Session-Id", Configuration.ApiClient.ParameterToString(sessionId)); // header parameter
            if (body != null && body.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = body; // byte array
            }
            else if (   body != null
                     && (   body.GetType() == typeof(System.IO.FileStream)
                         || body.GetType() == typeof(System.IO.BinaryReader)
                         || body.GetType() == typeof(System.IO.BufferedStream)
                   	     || body.GetType() == typeof(System.IO.MemoryStream)
                   	     || body.GetType() == typeof(System.IO.StreamReader)
                   	    )
                    )
            {
                localVarPostBody =Configuration.ApiClient.toByteArray(body); // byte array
            }
            else if ( body != null )
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body);
            }

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadSignedResourcesChunk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*ObjectDetails*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(ObjectDetails)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(ObjectDetails)));
            
        }

        /// <summary>
        ///  Resumable upload for signed URLs.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of signed resource</param>
        /// <param name="contentRange">Byte range of a segment being uploaded</param>
        /// <param name="sessionId">Unique identifier of a session of a file being uploaded</param>
        /// <param name="body"></param>
        /// <param name="contentDisposition">The suggested default filename when downloading this object to a file after it has been uploaded. (optional)</param>
        /// <param name="xAdsRegion">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
        /// <returns>Task of ObjectDetails</returns>
        public async System.Threading.Tasks.Task</*ObjectDetails*/dynamic> UploadSignedResourcesChunkAsync (string id, string contentRange, string sessionId, System.IO.Stream body, string contentDisposition = null, string xAdsRegion = null)
        {
             ApiResponse</*ObjectDetails*/dynamic> localVarResponse = await UploadSignedResourcesChunkAsyncWithHttpInfo(id, contentRange, sessionId, body, contentDisposition, xAdsRegion);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Resumable upload for signed URLs.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of signed resource</param>
        /// <param name="contentRange">Byte range of a segment being uploaded</param>
        /// <param name="sessionId">Unique identifier of a session of a file being uploaded</param>
        /// <param name="body"></param>
        /// <param name="contentDisposition">The suggested default filename when downloading this object to a file after it has been uploaded. (optional)</param>
        /// <param name="xAdsRegion">The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60;EMEA&#x60; Default is &#x60;US&#x60;  (optional, default to US)</param>
        /// <returns>Task of ApiResponse (ObjectDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*ObjectDetails*/dynamic>> UploadSignedResourcesChunkAsyncWithHttpInfo (string id, string contentRange, string sessionId, System.IO.Stream body, string contentDisposition = null, string xAdsRegion = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ObjectsApi->UploadSignedResourcesChunk");
            // verify the required parameter 'contentRange' is set
            if (contentRange == null)
                throw new ApiException(400, "Missing required parameter 'contentRange' when calling ObjectsApi->UploadSignedResourcesChunk");
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling ObjectsApi->UploadSignedResourcesChunk");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ObjectsApi->UploadSignedResourcesChunk");

            var localVarPath = "/oss/v2/signedresources/{id}/resumable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (contentRange != null) localVarHeaderParams.Add("Content-Range", Configuration.ApiClient.ParameterToString(contentRange)); // header parameter
            if (contentDisposition != null) localVarHeaderParams.Add("Content-Disposition", Configuration.ApiClient.ParameterToString(contentDisposition)); // header parameter
            if (xAdsRegion != null) localVarHeaderParams.Add("x-ads-region", Configuration.ApiClient.ParameterToString(xAdsRegion)); // header parameter
            if (sessionId != null) localVarHeaderParams.Add("Session-Id", Configuration.ApiClient.ParameterToString(sessionId)); // header parameter
            if (body != null && body.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = body; // byte array
            }
            else if (   body != null
                     && (   body.GetType() == typeof(System.IO.FileStream)
                         || body.GetType() == typeof(System.IO.BinaryReader)
                         || body.GetType() == typeof(System.IO.BufferedStream)
                   	     || body.GetType() == typeof(System.IO.MemoryStream)
                   	     || body.GetType() == typeof(System.IO.StreamReader)
                   	    )
                    )
            {
                localVarPostBody =Configuration.ApiClient.toByteArray(body); // byte array
            }
            else if ( body != null )
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body);
            }

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadSignedResourcesChunk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*ObjectDetails*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(ObjectDetails)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(ObjectDetails)));
            
        }

    }
}
