/* 
 * Forge SDK
 *
 * The Forge Platform contains an expanding collection of web service components that can be used with Autodesk cloud-based products or your own technologies. Take advantage of Autodeskâ€™s expertise in design and engineering.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: forge.help@autodesk.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Newtonsoft.Json.Linq;
using Autodesk.Forge.Client;
using Autodesk.Forge.Model;
using Version=Autodesk.Forge.Model.Version;

namespace Autodesk.Forge
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVersionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the version with the given &#x60;version_id&#x60;. 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="versionId">the &#x60;version id&#x60;</param>
        /// <returns>Version</returns>
        /*Version*/dynamic GetVersion (string projectId, string versionId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the version with the given &#x60;version_id&#x60;. 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="versionId">the &#x60;version id&#x60;</param>
        /// <returns>ApiResponse of Version</returns>
        ApiResponse</*Version*/dynamic> GetVersionWithHttpInfo (string projectId, string versionId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the item the given version is associated with. 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="versionId">the &#x60;version id&#x60;</param>
        /// <returns>Item</returns>
        /*Item*/dynamic GetVersionItem (string projectId, string versionId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the item the given version is associated with. 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="versionId">the &#x60;version id&#x60;</param>
        /// <returns>ApiResponse of Item</returns>
        ApiResponse</*Item*/dynamic> GetVersionItemWithHttpInfo (string projectId, string versionId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the resources (&#x60;items&#x60;, &#x60;folders&#x60;, and &#x60;versions&#x60;) which have a custom relationship with the given &#x60;version_id&#x60;. Custom relationships can be established between a version of an item and other resources within the &#39;data&#39; domain service (folders, items, and versions). 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="versionId">the &#x60;version id&#x60;</param>
        /// <param name="filterType">filter by the &#x60;type&#x60; of the &#x60;ref&#x60; target (optional)</param>
        /// <param name="filterId">filter by the &#x60;id&#x60; of the &#x60;ref&#x60; target (optional)</param>
        /// <param name="filterExtensionType">filter by the extension type (optional)</param>
        /// <returns>JsonApiCollection</returns>
        /*JsonApiCollection*/dynamic GetVersionRefs (string projectId, string versionId, List<string> filterType = null, List<string> filterId = null, List<string> filterExtensionType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the resources (&#x60;items&#x60;, &#x60;folders&#x60;, and &#x60;versions&#x60;) which have a custom relationship with the given &#x60;version_id&#x60;. Custom relationships can be established between a version of an item and other resources within the &#39;data&#39; domain service (folders, items, and versions). 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="versionId">the &#x60;version id&#x60;</param>
        /// <param name="filterType">filter by the &#x60;type&#x60; of the &#x60;ref&#x60; target (optional)</param>
        /// <param name="filterId">filter by the &#x60;id&#x60; of the &#x60;ref&#x60; target (optional)</param>
        /// <param name="filterExtensionType">filter by the extension type (optional)</param>
        /// <returns>ApiResponse of JsonApiCollection</returns>
        ApiResponse</*JsonApiCollection*/dynamic> GetVersionRefsWithHttpInfo (string projectId, string versionId, List<string> filterType = null, List<string> filterId = null, List<string> filterExtensionType = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the custom relationships that are associated to the given &#x60;version_id&#x60;. Custom relationships can be established between a version of an item and other resources within the &#39;data&#39; domain service (folders, items, and versions). 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="versionId">the &#x60;version id&#x60;</param>
        /// <param name="filterType">filter by the &#x60;type&#x60; of the &#x60;ref&#x60; target (optional)</param>
        /// <param name="filterId">filter by the &#x60;id&#x60; of the &#x60;ref&#x60; target (optional)</param>
        /// <param name="filterRefType">filter by &#x60;refType&#x60; (optional)</param>
        /// <param name="filterDirection">filter by the direction of the reference (optional)</param>
        /// <param name="filterExtensionType">filter by the extension type (optional)</param>
        /// <returns>Refs</returns>
        /*Refs*/dynamic GetVersionRelationshipsRefs (string projectId, string versionId, List<string> filterType = null, List<string> filterId = null, List<string> filterRefType = null, string filterDirection = null, List<string> filterExtensionType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the custom relationships that are associated to the given &#x60;version_id&#x60;. Custom relationships can be established between a version of an item and other resources within the &#39;data&#39; domain service (folders, items, and versions). 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="versionId">the &#x60;version id&#x60;</param>
        /// <param name="filterType">filter by the &#x60;type&#x60; of the &#x60;ref&#x60; target (optional)</param>
        /// <param name="filterId">filter by the &#x60;id&#x60; of the &#x60;ref&#x60; target (optional)</param>
        /// <param name="filterRefType">filter by &#x60;refType&#x60; (optional)</param>
        /// <param name="filterDirection">filter by the direction of the reference (optional)</param>
        /// <param name="filterExtensionType">filter by the extension type (optional)</param>
        /// <returns>ApiResponse of Refs</returns>
        ApiResponse</*Refs*/dynamic> GetVersionRelationshipsRefsWithHttpInfo (string projectId, string versionId, List<string> filterType = null, List<string> filterId = null, List<string> filterRefType = null, string filterDirection = null, List<string> filterExtensionType = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a custom relationship between a version and another resource within the &#39;data&#39; domain service (folder, item, or version). 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="versionId">the &#x60;version id&#x60;</param>
        /// <param name="body">describe the ref to be created</param>
        /// <returns></returns>
        void PostVersionRelationshipsRef (string projectId, string versionId, CreateRef body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a custom relationship between a version and another resource within the &#39;data&#39; domain service (folder, item, or version). 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="versionId">the &#x60;version id&#x60;</param>
        /// <param name="body">describe the ref to be created</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostVersionRelationshipsRefWithHttpInfo (string projectId, string versionId, CreateRef body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the version with the given &#x60;version_id&#x60;. 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="versionId">the &#x60;version id&#x60;</param>
        /// <returns>Task of Version</returns>
        System.Threading.Tasks.Task</*Version*/dynamic> GetVersionAsync (string projectId, string versionId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the version with the given &#x60;version_id&#x60;. 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="versionId">the &#x60;version id&#x60;</param>
        /// <returns>Task of ApiResponse (Version)</returns>
        System.Threading.Tasks.Task<ApiResponse</*Version*/dynamic>> GetVersionAsyncWithHttpInfo (string projectId, string versionId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the item the given version is associated with. 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="versionId">the &#x60;version id&#x60;</param>
        /// <returns>Task of Item</returns>
        System.Threading.Tasks.Task</*Item*/dynamic> GetVersionItemAsync (string projectId, string versionId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the item the given version is associated with. 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="versionId">the &#x60;version id&#x60;</param>
        /// <returns>Task of ApiResponse (Item)</returns>
        System.Threading.Tasks.Task<ApiResponse</*Item*/dynamic>> GetVersionItemAsyncWithHttpInfo (string projectId, string versionId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the resources (&#x60;items&#x60;, &#x60;folders&#x60;, and &#x60;versions&#x60;) which have a custom relationship with the given &#x60;version_id&#x60;. Custom relationships can be established between a version of an item and other resources within the &#39;data&#39; domain service (folders, items, and versions). 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="versionId">the &#x60;version id&#x60;</param>
        /// <param name="filterType">filter by the &#x60;type&#x60; of the &#x60;ref&#x60; target (optional)</param>
        /// <param name="filterId">filter by the &#x60;id&#x60; of the &#x60;ref&#x60; target (optional)</param>
        /// <param name="filterExtensionType">filter by the extension type (optional)</param>
        /// <returns>Task of JsonApiCollection</returns>
        System.Threading.Tasks.Task</*JsonApiCollection*/dynamic> GetVersionRefsAsync (string projectId, string versionId, List<string> filterType = null, List<string> filterId = null, List<string> filterExtensionType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the resources (&#x60;items&#x60;, &#x60;folders&#x60;, and &#x60;versions&#x60;) which have a custom relationship with the given &#x60;version_id&#x60;. Custom relationships can be established between a version of an item and other resources within the &#39;data&#39; domain service (folders, items, and versions). 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="versionId">the &#x60;version id&#x60;</param>
        /// <param name="filterType">filter by the &#x60;type&#x60; of the &#x60;ref&#x60; target (optional)</param>
        /// <param name="filterId">filter by the &#x60;id&#x60; of the &#x60;ref&#x60; target (optional)</param>
        /// <param name="filterExtensionType">filter by the extension type (optional)</param>
        /// <returns>Task of ApiResponse (JsonApiCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse</*JsonApiCollection*/dynamic>> GetVersionRefsAsyncWithHttpInfo (string projectId, string versionId, List<string> filterType = null, List<string> filterId = null, List<string> filterExtensionType = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the custom relationships that are associated to the given &#x60;version_id&#x60;. Custom relationships can be established between a version of an item and other resources within the &#39;data&#39; domain service (folders, items, and versions). 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="versionId">the &#x60;version id&#x60;</param>
        /// <param name="filterType">filter by the &#x60;type&#x60; of the &#x60;ref&#x60; target (optional)</param>
        /// <param name="filterId">filter by the &#x60;id&#x60; of the &#x60;ref&#x60; target (optional)</param>
        /// <param name="filterRefType">filter by &#x60;refType&#x60; (optional)</param>
        /// <param name="filterDirection">filter by the direction of the reference (optional)</param>
        /// <param name="filterExtensionType">filter by the extension type (optional)</param>
        /// <returns>Task of Refs</returns>
        System.Threading.Tasks.Task</*Refs*/dynamic> GetVersionRelationshipsRefsAsync (string projectId, string versionId, List<string> filterType = null, List<string> filterId = null, List<string> filterRefType = null, string filterDirection = null, List<string> filterExtensionType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the custom relationships that are associated to the given &#x60;version_id&#x60;. Custom relationships can be established between a version of an item and other resources within the &#39;data&#39; domain service (folders, items, and versions). 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="versionId">the &#x60;version id&#x60;</param>
        /// <param name="filterType">filter by the &#x60;type&#x60; of the &#x60;ref&#x60; target (optional)</param>
        /// <param name="filterId">filter by the &#x60;id&#x60; of the &#x60;ref&#x60; target (optional)</param>
        /// <param name="filterRefType">filter by &#x60;refType&#x60; (optional)</param>
        /// <param name="filterDirection">filter by the direction of the reference (optional)</param>
        /// <param name="filterExtensionType">filter by the extension type (optional)</param>
        /// <returns>Task of ApiResponse (Refs)</returns>
        System.Threading.Tasks.Task<ApiResponse</*Refs*/dynamic>> GetVersionRelationshipsRefsAsyncWithHttpInfo (string projectId, string versionId, List<string> filterType = null, List<string> filterId = null, List<string> filterRefType = null, string filterDirection = null, List<string> filterExtensionType = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a custom relationship between a version and another resource within the &#39;data&#39; domain service (folder, item, or version). 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="versionId">the &#x60;version id&#x60;</param>
        /// <param name="body">describe the ref to be created</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostVersionRelationshipsRefAsync (string projectId, string versionId, CreateRef body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a custom relationship between a version and another resource within the &#39;data&#39; domain service (folder, item, or version). 
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="versionId">the &#x60;version id&#x60;</param>
        /// <param name="body">describe the ref to be created</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostVersionRelationshipsRefAsyncWithHttpInfo (string projectId, string versionId, CreateRef body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VersionsApi : IVersionsApi
    {
        private Autodesk.Forge.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VersionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VersionsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Autodesk.Forge.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VersionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VersionsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Autodesk.Forge.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Autodesk.Forge.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Returns the version with the given &#x60;version_id&#x60;. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="versionId">the &#x60;version id&#x60;</param>
        /// <returns>Version</returns>
        public /*Version*/dynamic GetVersion (string projectId, string versionId)
        {
             ApiResponse</*Version*/dynamic> localVarResponse = GetVersionWithHttpInfo(projectId, versionId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the version with the given &#x60;version_id&#x60;. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="versionId">the &#x60;version id&#x60;</param>
        /// <returns>ApiResponse of Version</returns>
        public ApiResponse< /*Version*/dynamic > GetVersionWithHttpInfo (string projectId, string versionId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling VersionsApi->GetVersion");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling VersionsApi->GetVersion");

            var localVarPath = "/data/v1/projects/{project_id}/versions/{version_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (projectId != null) localVarPathParams.Add("project_id", Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (versionId != null) localVarPathParams.Add("version_id", Configuration.ApiClient.ParameterToString(versionId)); // path parameter

            // authentication (oauth2_access_code) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*Version*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(Version)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(Version)));
            
        }

        /// <summary>
        ///  Returns the version with the given &#x60;version_id&#x60;. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="versionId">the &#x60;version id&#x60;</param>
        /// <returns>Task of Version</returns>
        public async System.Threading.Tasks.Task</*Version*/dynamic> GetVersionAsync (string projectId, string versionId)
        {
             ApiResponse</*Version*/dynamic> localVarResponse = await GetVersionAsyncWithHttpInfo(projectId, versionId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the version with the given &#x60;version_id&#x60;. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="versionId">the &#x60;version id&#x60;</param>
        /// <returns>Task of ApiResponse (Version)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*Version*/dynamic>> GetVersionAsyncWithHttpInfo (string projectId, string versionId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling VersionsApi->GetVersion");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling VersionsApi->GetVersion");

            var localVarPath = "/data/v1/projects/{project_id}/versions/{version_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (projectId != null) localVarPathParams.Add("project_id", Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (versionId != null) localVarPathParams.Add("version_id", Configuration.ApiClient.ParameterToString(versionId)); // path parameter

            // authentication (oauth2_access_code) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*Version*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(Version)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(Version)));
            
        }

        /// <summary>
        ///  Returns the item the given version is associated with. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="versionId">the &#x60;version id&#x60;</param>
        /// <returns>Item</returns>
        public /*Item*/dynamic GetVersionItem (string projectId, string versionId)
        {
             ApiResponse</*Item*/dynamic> localVarResponse = GetVersionItemWithHttpInfo(projectId, versionId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the item the given version is associated with. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="versionId">the &#x60;version id&#x60;</param>
        /// <returns>ApiResponse of Item</returns>
        public ApiResponse< /*Item*/dynamic > GetVersionItemWithHttpInfo (string projectId, string versionId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling VersionsApi->GetVersionItem");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling VersionsApi->GetVersionItem");

            var localVarPath = "/data/v1/projects/{project_id}/versions/{version_id}/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (projectId != null) localVarPathParams.Add("project_id", Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (versionId != null) localVarPathParams.Add("version_id", Configuration.ApiClient.ParameterToString(versionId)); // path parameter

            // authentication (oauth2_access_code) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVersionItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*Item*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(Item)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(Item)));
            
        }

        /// <summary>
        ///  Returns the item the given version is associated with. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="versionId">the &#x60;version id&#x60;</param>
        /// <returns>Task of Item</returns>
        public async System.Threading.Tasks.Task</*Item*/dynamic> GetVersionItemAsync (string projectId, string versionId)
        {
             ApiResponse</*Item*/dynamic> localVarResponse = await GetVersionItemAsyncWithHttpInfo(projectId, versionId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the item the given version is associated with. 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="versionId">the &#x60;version id&#x60;</param>
        /// <returns>Task of ApiResponse (Item)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*Item*/dynamic>> GetVersionItemAsyncWithHttpInfo (string projectId, string versionId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling VersionsApi->GetVersionItem");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling VersionsApi->GetVersionItem");

            var localVarPath = "/data/v1/projects/{project_id}/versions/{version_id}/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (projectId != null) localVarPathParams.Add("project_id", Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (versionId != null) localVarPathParams.Add("version_id", Configuration.ApiClient.ParameterToString(versionId)); // path parameter

            // authentication (oauth2_access_code) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVersionItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*Item*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(Item)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(Item)));
            
        }

        /// <summary>
        ///  Returns the resources (&#x60;items&#x60;, &#x60;folders&#x60;, and &#x60;versions&#x60;) which have a custom relationship with the given &#x60;version_id&#x60;. Custom relationships can be established between a version of an item and other resources within the &#39;data&#39; domain service (folders, items, and versions). 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="versionId">the &#x60;version id&#x60;</param>
        /// <param name="filterType">filter by the &#x60;type&#x60; of the &#x60;ref&#x60; target (optional)</param>
        /// <param name="filterId">filter by the &#x60;id&#x60; of the &#x60;ref&#x60; target (optional)</param>
        /// <param name="filterExtensionType">filter by the extension type (optional)</param>
        /// <returns>JsonApiCollection</returns>
        public /*JsonApiCollection*/dynamic GetVersionRefs (string projectId, string versionId, List<string> filterType = null, List<string> filterId = null, List<string> filterExtensionType = null)
        {
             ApiResponse</*JsonApiCollection*/dynamic> localVarResponse = GetVersionRefsWithHttpInfo(projectId, versionId, filterType, filterId, filterExtensionType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the resources (&#x60;items&#x60;, &#x60;folders&#x60;, and &#x60;versions&#x60;) which have a custom relationship with the given &#x60;version_id&#x60;. Custom relationships can be established between a version of an item and other resources within the &#39;data&#39; domain service (folders, items, and versions). 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="versionId">the &#x60;version id&#x60;</param>
        /// <param name="filterType">filter by the &#x60;type&#x60; of the &#x60;ref&#x60; target (optional)</param>
        /// <param name="filterId">filter by the &#x60;id&#x60; of the &#x60;ref&#x60; target (optional)</param>
        /// <param name="filterExtensionType">filter by the extension type (optional)</param>
        /// <returns>ApiResponse of JsonApiCollection</returns>
        public ApiResponse< /*JsonApiCollection*/dynamic > GetVersionRefsWithHttpInfo (string projectId, string versionId, List<string> filterType = null, List<string> filterId = null, List<string> filterExtensionType = null)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling VersionsApi->GetVersionRefs");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling VersionsApi->GetVersionRefs");

            var localVarPath = "/data/v1/projects/{project_id}/versions/{version_id}/refs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (projectId != null) localVarPathParams.Add("project_id", Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (versionId != null) localVarPathParams.Add("version_id", Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (filterType != null) localVarQueryParams.Add("filter[type]", Configuration.ApiClient.ParameterToString(filterType)); // query parameter
            if (filterId != null) localVarQueryParams.Add("filter[id]", Configuration.ApiClient.ParameterToString(filterId)); // query parameter
            if (filterExtensionType != null) localVarQueryParams.Add("filter[extension.type]", Configuration.ApiClient.ParameterToString(filterExtensionType)); // query parameter

            // authentication (oauth2_access_code) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVersionRefs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*JsonApiCollection*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(JsonApiCollection)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonApiCollection)));
            
        }

        /// <summary>
        ///  Returns the resources (&#x60;items&#x60;, &#x60;folders&#x60;, and &#x60;versions&#x60;) which have a custom relationship with the given &#x60;version_id&#x60;. Custom relationships can be established between a version of an item and other resources within the &#39;data&#39; domain service (folders, items, and versions). 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="versionId">the &#x60;version id&#x60;</param>
        /// <param name="filterType">filter by the &#x60;type&#x60; of the &#x60;ref&#x60; target (optional)</param>
        /// <param name="filterId">filter by the &#x60;id&#x60; of the &#x60;ref&#x60; target (optional)</param>
        /// <param name="filterExtensionType">filter by the extension type (optional)</param>
        /// <returns>Task of JsonApiCollection</returns>
        public async System.Threading.Tasks.Task</*JsonApiCollection*/dynamic> GetVersionRefsAsync (string projectId, string versionId, List<string> filterType = null, List<string> filterId = null, List<string> filterExtensionType = null)
        {
             ApiResponse</*JsonApiCollection*/dynamic> localVarResponse = await GetVersionRefsAsyncWithHttpInfo(projectId, versionId, filterType, filterId, filterExtensionType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the resources (&#x60;items&#x60;, &#x60;folders&#x60;, and &#x60;versions&#x60;) which have a custom relationship with the given &#x60;version_id&#x60;. Custom relationships can be established between a version of an item and other resources within the &#39;data&#39; domain service (folders, items, and versions). 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="versionId">the &#x60;version id&#x60;</param>
        /// <param name="filterType">filter by the &#x60;type&#x60; of the &#x60;ref&#x60; target (optional)</param>
        /// <param name="filterId">filter by the &#x60;id&#x60; of the &#x60;ref&#x60; target (optional)</param>
        /// <param name="filterExtensionType">filter by the extension type (optional)</param>
        /// <returns>Task of ApiResponse (JsonApiCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*JsonApiCollection*/dynamic>> GetVersionRefsAsyncWithHttpInfo (string projectId, string versionId, List<string> filterType = null, List<string> filterId = null, List<string> filterExtensionType = null)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling VersionsApi->GetVersionRefs");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling VersionsApi->GetVersionRefs");

            var localVarPath = "/data/v1/projects/{project_id}/versions/{version_id}/refs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (projectId != null) localVarPathParams.Add("project_id", Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (versionId != null) localVarPathParams.Add("version_id", Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (filterType != null) localVarQueryParams.Add("filter[type]", Configuration.ApiClient.ParameterToString(filterType)); // query parameter
            if (filterId != null) localVarQueryParams.Add("filter[id]", Configuration.ApiClient.ParameterToString(filterId)); // query parameter
            if (filterExtensionType != null) localVarQueryParams.Add("filter[extension.type]", Configuration.ApiClient.ParameterToString(filterExtensionType)); // query parameter

            // authentication (oauth2_access_code) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVersionRefs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*JsonApiCollection*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(JsonApiCollection)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonApiCollection)));
            
        }

        /// <summary>
        ///  Returns the custom relationships that are associated to the given &#x60;version_id&#x60;. Custom relationships can be established between a version of an item and other resources within the &#39;data&#39; domain service (folders, items, and versions). 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="versionId">the &#x60;version id&#x60;</param>
        /// <param name="filterType">filter by the &#x60;type&#x60; of the &#x60;ref&#x60; target (optional)</param>
        /// <param name="filterId">filter by the &#x60;id&#x60; of the &#x60;ref&#x60; target (optional)</param>
        /// <param name="filterRefType">filter by &#x60;refType&#x60; (optional)</param>
        /// <param name="filterDirection">filter by the direction of the reference (optional)</param>
        /// <param name="filterExtensionType">filter by the extension type (optional)</param>
        /// <returns>Refs</returns>
        public /*Refs*/dynamic GetVersionRelationshipsRefs (string projectId, string versionId, List<string> filterType = null, List<string> filterId = null, List<string> filterRefType = null, string filterDirection = null, List<string> filterExtensionType = null)
        {
             ApiResponse</*Refs*/dynamic> localVarResponse = GetVersionRelationshipsRefsWithHttpInfo(projectId, versionId, filterType, filterId, filterRefType, filterDirection, filterExtensionType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the custom relationships that are associated to the given &#x60;version_id&#x60;. Custom relationships can be established between a version of an item and other resources within the &#39;data&#39; domain service (folders, items, and versions). 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="versionId">the &#x60;version id&#x60;</param>
        /// <param name="filterType">filter by the &#x60;type&#x60; of the &#x60;ref&#x60; target (optional)</param>
        /// <param name="filterId">filter by the &#x60;id&#x60; of the &#x60;ref&#x60; target (optional)</param>
        /// <param name="filterRefType">filter by &#x60;refType&#x60; (optional)</param>
        /// <param name="filterDirection">filter by the direction of the reference (optional)</param>
        /// <param name="filterExtensionType">filter by the extension type (optional)</param>
        /// <returns>ApiResponse of Refs</returns>
        public ApiResponse< /*Refs*/dynamic > GetVersionRelationshipsRefsWithHttpInfo (string projectId, string versionId, List<string> filterType = null, List<string> filterId = null, List<string> filterRefType = null, string filterDirection = null, List<string> filterExtensionType = null)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling VersionsApi->GetVersionRelationshipsRefs");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling VersionsApi->GetVersionRelationshipsRefs");

            var localVarPath = "/data/v1/projects/{project_id}/versions/{version_id}/relationships/refs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (projectId != null) localVarPathParams.Add("project_id", Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (versionId != null) localVarPathParams.Add("version_id", Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (filterType != null) localVarQueryParams.Add("filter[type]", Configuration.ApiClient.ParameterToString(filterType)); // query parameter
            if (filterId != null) localVarQueryParams.Add("filter[id]", Configuration.ApiClient.ParameterToString(filterId)); // query parameter
            if (filterRefType != null) localVarQueryParams.Add("filter[refType]", Configuration.ApiClient.ParameterToString(filterRefType)); // query parameter
            if (filterDirection != null) localVarQueryParams.Add("filter[direction]", Configuration.ApiClient.ParameterToString(filterDirection)); // query parameter
            if (filterExtensionType != null) localVarQueryParams.Add("filter[extension.type]", Configuration.ApiClient.ParameterToString(filterExtensionType)); // query parameter

            // authentication (oauth2_access_code) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVersionRelationshipsRefs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*Refs*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(Refs)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(Refs)));
            
        }

        /// <summary>
        ///  Returns the custom relationships that are associated to the given &#x60;version_id&#x60;. Custom relationships can be established between a version of an item and other resources within the &#39;data&#39; domain service (folders, items, and versions). 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="versionId">the &#x60;version id&#x60;</param>
        /// <param name="filterType">filter by the &#x60;type&#x60; of the &#x60;ref&#x60; target (optional)</param>
        /// <param name="filterId">filter by the &#x60;id&#x60; of the &#x60;ref&#x60; target (optional)</param>
        /// <param name="filterRefType">filter by &#x60;refType&#x60; (optional)</param>
        /// <param name="filterDirection">filter by the direction of the reference (optional)</param>
        /// <param name="filterExtensionType">filter by the extension type (optional)</param>
        /// <returns>Task of Refs</returns>
        public async System.Threading.Tasks.Task</*Refs*/dynamic> GetVersionRelationshipsRefsAsync (string projectId, string versionId, List<string> filterType = null, List<string> filterId = null, List<string> filterRefType = null, string filterDirection = null, List<string> filterExtensionType = null)
        {
             ApiResponse</*Refs*/dynamic> localVarResponse = await GetVersionRelationshipsRefsAsyncWithHttpInfo(projectId, versionId, filterType, filterId, filterRefType, filterDirection, filterExtensionType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the custom relationships that are associated to the given &#x60;version_id&#x60;. Custom relationships can be established between a version of an item and other resources within the &#39;data&#39; domain service (folders, items, and versions). 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="versionId">the &#x60;version id&#x60;</param>
        /// <param name="filterType">filter by the &#x60;type&#x60; of the &#x60;ref&#x60; target (optional)</param>
        /// <param name="filterId">filter by the &#x60;id&#x60; of the &#x60;ref&#x60; target (optional)</param>
        /// <param name="filterRefType">filter by &#x60;refType&#x60; (optional)</param>
        /// <param name="filterDirection">filter by the direction of the reference (optional)</param>
        /// <param name="filterExtensionType">filter by the extension type (optional)</param>
        /// <returns>Task of ApiResponse (Refs)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*Refs*/dynamic>> GetVersionRelationshipsRefsAsyncWithHttpInfo (string projectId, string versionId, List<string> filterType = null, List<string> filterId = null, List<string> filterRefType = null, string filterDirection = null, List<string> filterExtensionType = null)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling VersionsApi->GetVersionRelationshipsRefs");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling VersionsApi->GetVersionRelationshipsRefs");

            var localVarPath = "/data/v1/projects/{project_id}/versions/{version_id}/relationships/refs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (projectId != null) localVarPathParams.Add("project_id", Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (versionId != null) localVarPathParams.Add("version_id", Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (filterType != null) localVarQueryParams.Add("filter[type]", Configuration.ApiClient.ParameterToString(filterType)); // query parameter
            if (filterId != null) localVarQueryParams.Add("filter[id]", Configuration.ApiClient.ParameterToString(filterId)); // query parameter
            if (filterRefType != null) localVarQueryParams.Add("filter[refType]", Configuration.ApiClient.ParameterToString(filterRefType)); // query parameter
            if (filterDirection != null) localVarQueryParams.Add("filter[direction]", Configuration.ApiClient.ParameterToString(filterDirection)); // query parameter
            if (filterExtensionType != null) localVarQueryParams.Add("filter[extension.type]", Configuration.ApiClient.ParameterToString(filterExtensionType)); // query parameter

            // authentication (oauth2_access_code) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVersionRelationshipsRefs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*Refs*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(Refs)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(Refs)));
            
        }

        /// <summary>
        ///  Creates a custom relationship between a version and another resource within the &#39;data&#39; domain service (folder, item, or version). 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="versionId">the &#x60;version id&#x60;</param>
        /// <param name="body">describe the ref to be created</param>
        /// <returns></returns>
        public void PostVersionRelationshipsRef (string projectId, string versionId, CreateRef body)
        {
             PostVersionRelationshipsRefWithHttpInfo(projectId, versionId, body);
        }

        /// <summary>
        ///  Creates a custom relationship between a version and another resource within the &#39;data&#39; domain service (folder, item, or version). 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="versionId">the &#x60;version id&#x60;</param>
        /// <param name="body">describe the ref to be created</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostVersionRelationshipsRefWithHttpInfo (string projectId, string versionId, CreateRef body)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling VersionsApi->PostVersionRelationshipsRef");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling VersionsApi->PostVersionRelationshipsRef");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling VersionsApi->PostVersionRelationshipsRef");

            var localVarPath = "/data/v1/projects/{project_id}/versions/{version_id}/relationships/refs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (projectId != null) localVarPathParams.Add("project_id", Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (versionId != null) localVarPathParams.Add("version_id", Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (body != null && body.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = body; // byte array
            }
            else if (   body != null
                     && (   body.GetType() == typeof(System.IO.FileStream)
                         || body.GetType() == typeof(System.IO.BinaryReader)
                         || body.GetType() == typeof(System.IO.BufferedStream)
                   	     || body.GetType() == typeof(System.IO.MemoryStream)
                   	     || body.GetType() == typeof(System.IO.StreamReader)
                   	    )
                    )
            {
                localVarPostBody =Configuration.ApiClient.toByteArray(body); // byte array
            }
            else if ( body != null )
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body);
            }

            // authentication (oauth2_access_code) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostVersionRelationshipsRef", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Creates a custom relationship between a version and another resource within the &#39;data&#39; domain service (folder, item, or version). 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="versionId">the &#x60;version id&#x60;</param>
        /// <param name="body">describe the ref to be created</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostVersionRelationshipsRefAsync (string projectId, string versionId, CreateRef body)
        {
             await PostVersionRelationshipsRefAsyncWithHttpInfo(projectId, versionId, body);

        }

        /// <summary>
        ///  Creates a custom relationship between a version and another resource within the &#39;data&#39; domain service (folder, item, or version). 
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">the &#x60;project id&#x60;</param>
        /// <param name="versionId">the &#x60;version id&#x60;</param>
        /// <param name="body">describe the ref to be created</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostVersionRelationshipsRefAsyncWithHttpInfo (string projectId, string versionId, CreateRef body)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling VersionsApi->PostVersionRelationshipsRef");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling VersionsApi->PostVersionRelationshipsRef");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling VersionsApi->PostVersionRelationshipsRef");

            var localVarPath = "/data/v1/projects/{project_id}/versions/{version_id}/relationships/refs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json", 
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (projectId != null) localVarPathParams.Add("project_id", Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (versionId != null) localVarPathParams.Add("version_id", Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (body != null && body.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = body; // byte array
            }
            else if (   body != null
                     && (   body.GetType() == typeof(System.IO.FileStream)
                         || body.GetType() == typeof(System.IO.BinaryReader)
                         || body.GetType() == typeof(System.IO.BufferedStream)
                   	     || body.GetType() == typeof(System.IO.MemoryStream)
                   	     || body.GetType() == typeof(System.IO.StreamReader)
                   	    )
                    )
            {
                localVarPostBody =Configuration.ApiClient.toByteArray(body); // byte array
            }
            else if ( body != null )
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body);
            }

            // authentication (oauth2_access_code) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostVersionRelationshipsRef", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
